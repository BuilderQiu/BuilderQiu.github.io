<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一本正经的扯淡</title>
  <subtitle>U Still Don&#39;t Know</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://builderqiu.com/"/>
  <updated>2016-12-25T08:26:58.887Z</updated>
  <id>http://builderqiu.com/</id>
  
  <author>
    <name>BuilderQiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bridge Method (桥接方法)</title>
    <link href="http://builderqiu.com/2015/03/BridgeMethod.html"/>
    <id>http://builderqiu.com/2015/03/BridgeMethod.html</id>
    <published>2015-03-17T16:00:00.000Z</published>
    <updated>2016-12-25T08:26:58.887Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://berdy.iteye.com/blog/810488" target="_blank" rel="external">原文地址</a></p>
<p>Bridge Method直译过来就是桥接方法。从字面意思可以很容易的理解出这个方法是在连接两个东西。那到底是在连接什么呢？废话少说，上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">abstract</span> T <span class="title">get</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function">String <span class="title">get</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBridge</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Class&lt;B&gt; clazz = B.class;</div><div class="line">		Method[] methods = clazz.getDeclaredMethods();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</div><div class="line">			Method m = methods[i];</div><div class="line">			System.out.println(getMethodInfo(m) + <span class="string">" is Bridge Method? "</span> + m.isBridge());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMethodInfo</span><span class="params">(Method m)</span></span>&#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		sb.append(m.getReturnType()).append(<span class="string">" "</span>);</div><div class="line">		sb.append(m.getName());</div><div class="line">		Class[]params = m.getParameterTypes();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</div><div class="line">			sb.append(params[i].getName()).append(<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行上面的代码，可以看到输出结果如下：<br><code>[class java.lang.String get] is Bridge Method? false</code><br><code>[class java.lang.Object get] is Bridge Method? true</code></p>
<p>或许你现在诧异了，怎么B类中只定义了一个方法，现在怎么出现了两个呢？而且返回类型和参数类型还不同。话说这个是java5中的泛型所带来的结果了。针对上面的这段代码分析下：<br>在java5之前，你可以往一个集合里扔任何你想扔的对象。往集合中放对象的人很爽了。但是从集合中去对象的人就头大了。你不知道你下个取到的对象将会是什么类型的。不知道转成什么类型，你也就只能使用所有Object的方法了，这样就毫无意义了。所以在java5中提供了泛型这一新特性。程序员在写代码的时候可以指定集合可以存放对象的类型。然后将这些类型检查的事情交给编译器去做，减少了程序员的工作。<br>上面代码中&lt;&gt;中的T和String就是指定类的参数类型。T代表一种泛型，告诉编译器，一旦有类指定了T这个参数的实际类，那么get方法返回的类型也必须为同一个类（当然也可以是这个类的子类；这个也是java5中的协变式返回新特性），如果不是，就必须报错提示；将原来的运行时可能出现的错误提前到编译期了。那么，假设你是java5编译器的设计者，你会如何来设计让编译器能实现这个特性，同时能保证编译出来的字节码可以在老版本的jdk中运行呢？java5编译器中作了个很巧妙的设计——桥接方法。</p>
<p>下面来说说java5编译器是如何来编译上面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">abstract</span> T <span class="title">get</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于A类，编译器看到&lt;&gt;中指定的T参数后，会用Object把类中的其他T参数替换。因为在jdk中根本就不存在T这个类嘛。替换后就成了下面这样子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">abstract</span> Object <span class="title">get</span><span class="params">(Object obj)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个过程称为类型擦除。对于B类，它继承了A类，指定了T参数为String。如果还按照以前那么编译，那编译的类就是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;  </div><div class="line">    <span class="function">String <span class="title">get</span><span class="params">(String s)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在运行时肯定会报错，因为B继承了A，而A又是asbtract类，B还没overriding A中Object get()方法。如何解决这个错误呢？java5编译器在编译的时候做了些手脚。当编译器发现你指定了类型参数，便会在编译的字节码中添加一个桥接方法。这个可以查看B的反编译代码就知道了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;  </div><div class="line">    <span class="comment">//编译器添加的方法  </span></div><div class="line">    <span class="function">Object <span class="title">get</span><span class="params">(Object s)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> (Object) get((String) s);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="function">String <span class="title">get</span><span class="params">(String s)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么编译器会在什么情况下添加桥接方法呢？这个就不细说了，感兴趣的可以自己尝试。下面再说说协变式返回，什么是协变式返回呢？先可以对比下java1.4和java5中对于重写的定义：</p>
<blockquote>
<p>In Java 1.4, and earlier, one method can override another if the signatures match exactly.<br>In Java 5, a method can override another if the arguments match exactly but the return type of the overriding method, if it is a subtype of the return type of the other method.</p>
</blockquote>
<p>也就是说，对于重写的判断放宽了条件，子类中方法返回的类型是父类中方法返回类型的子类也是重写，听起来有点绕，看下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;  </div><div class="line">    <span class="function">Father <span class="title">get</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function">Son <span class="title">get</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sun</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>也就是B中的get()方法返回Son类也是重载。如何实现的呢？同样是使用桥接方法。</p>
<p>关于桥接方法更多的可以参考JLS<br><a href="http://docs.oracle.com/javase/specs/#15.12.4.5" target="_blank" rel="external">Create Frame, Synchronize, Transfer Control</a></p>
]]></content>
    
    <summary type="html">
    
      Java Bridge Method.
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="Java" scheme="http://builderqiu.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Redis与ActiveMQ、Spring的简单聊天室系统设计</title>
    <link href="http://builderqiu.com/2014/09/ChatRoomBaseOnRedis.html"/>
    <id>http://builderqiu.com/2014/09/ChatRoomBaseOnRedis.html</id>
    <published>2014-09-14T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:36.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><ul>
<li><a href="/2014-05/OnlineListByRedis">基于Redis的在线用户列表解决方案</a></li>
<li><a href="/2014-06/AsyncSystemBaseOnSpring">基于Spring的异步系统实现方案</a></li>
</ul>
<h2 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h2><h3 id="1-系统功能"><a href="#1-系统功能" class="headerlink" title="1.系统功能"></a>1.系统功能</h3><p>用于实现以页面为房间基数的聊天室系统，以达到访问同一页面的用户可以进行伪实时通讯交流的功能，之所以是伪实时通讯是因为实现技术基于WebAjax轮询完成，而非Socket之类真真双向通讯。<br><a id="more"></a></p>
<h3 id="2-组件技术"><a href="#2-组件技术" class="headerlink" title="2.组件技术"></a>2.组件技术</h3><ul>
<li>Redis （Published &amp; Subscribe）</li>
<li>ActiveMQ （MessageQueue）</li>
<li>Spring</li>
<li>Ajax</li>
</ul>
<h3 id="3-大体流程"><a href="#3-大体流程" class="headerlink" title="3.大体流程"></a>3.大体流程</h3><p>1.用户发送消息： 用户在Web前端发送消息（一般的表单）之后，后台收到消息，记录并向MessageQueue里添加一条待Published的消息，返回Web前端发送成功的状态。</p>
<p>2.系统发送消息：Spring Listener 后台监听MessageQueue，读取并处理消息，若为实时通讯的消息，则将MessagePublished到Redis中。</p>
<p>3.系统读取消息：系统中ChatListener Subscribe From Redis，从Redis中取出订阅的消息并加入本地缓存。</p>
<p>4.用户读取消息：Web前端定时发起Ajax请求新的数据，系统判断缓存中是否有新的消息，若有则返回所有新消息，若没有则Hold住连接，线程休眠，每隔一定时间去访问缓存查看是否有新消息，有则返回，达到一定次数还没有新消息则返回无新消息的状态。</p>
<h2 id="系统大体结构图"><a href="#系统大体结构图" class="headerlink" title="系统大体结构图"></a>系统大体结构图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">                                                        Server                                            </div><div class="line"></div><div class="line">                         +-----------------------------------------------------------------------+        </div><div class="line">                         |                                                                       |        </div><div class="line">                         |  +----------------------+          +-------------------------------+  |        </div><div class="line">                         |  |          Room        |          |         RoomManager           |  |        </div><div class="line">                         |  +----------------------+          +-------------------------------+  |        </div><div class="line">+------------+           |  |                      |          |                               |  |        </div><div class="line">|            | getMessage|  |   reads:HashMap      +----------+ rooms:HashMap                 |  |        </div><div class="line">|  Customer  | &lt;---------+  |                      |          |                               |  |        </div><div class="line">|            |           |  |   getAllMessage(sid) |          | refresh(channelId)            |  |        </div><div class="line">+------------+           |  |                      |          |                               |  |        </div><div class="line">                         |  |   addMessage(V)      |          | pushMessage(channelId,message)|  |        </div><div class="line">                         |  |                      |          |                               |  |        </div><div class="line">                         |  +----------------------+          +-------------------------------+  |        </div><div class="line">                         |                                                                       |        </div><div class="line">                         |            ^                                                          |        </div><div class="line">                         |            | Push                                                     |        </div><div class="line">                         |            |                                                          |        </div><div class="line">                         |                                                                       |        </div><div class="line">                         |  +----------------------+          +-------------------------------+  |        </div><div class="line">                         |  |    MessageListener   |          |          ChatListener         |  |        </div><div class="line">                         |  +----------------------+          +-------------------------------+  |        </div><div class="line">                         |  |                      |    +-----+                               |  |        </div><div class="line">                         |  |    onPMessage()      |    |     |                               |  |        </div><div class="line">                         |  |                      |    |     |                               |  |        </div><div class="line">                         |  +----------------------+    |     +-------------------------------+  |        </div><div class="line">                         |                              |                                        |        </div><div class="line">                         |            ^                 |                     ^                  |        </div><div class="line">                         |            |                 |                     |                  |        </div><div class="line">                         +-----------------------------------------------------------------------+        </div><div class="line">                                      |                 |                     |                           </div><div class="line">                                      | Sub             |                     | Listener (ConsumerMessage)</div><div class="line">                                      |                 |Publish              |                           </div><div class="line">                                      |                 |                     |                           </div><div class="line">                                                        |                                                 </div><div class="line">                           +----------------------+     |      +-------------------------------+             </div><div class="line">                           |                      |     |      |                               |          </div><div class="line">                           |         Redis        |  &lt;--+      |           ActiveMQ            |          </div><div class="line">                           |                      |            |                               |              </div><div class="line">                           +----------------------+            +-------------------------------+</div></pre></td></tr></table></figure>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="ChatRoom"><a href="#ChatRoom" class="headerlink" title="ChatRoom"></a>ChatRoom</h3><p>房间类，每个房间内持有该房间内所有的用户的已读消息位，同时提供所有用户获取新消息的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> jodd.cache.Cache;</div><div class="line"><span class="keyword">import</span> jodd.cache.FIFOCache;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoom</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Long nowMessageId = <span class="number">0L</span>;<span class="comment">//当前缓存最新消息的ID</span></div><div class="line"></div><div class="line">	<span class="keyword">private</span> String channelId;<span class="comment">//房间号</span></div><div class="line"></div><div class="line">	<span class="keyword">private</span> Map&lt;String,Long&gt; reads = <span class="keyword">new</span> HashMap&lt;String,Long&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Cache&lt;String,V&gt; cache = <span class="keyword">new</span> FIFOCache&lt;String,V&gt;(<span class="number">50</span>);<span class="comment">//最多保存50条未读信息</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ChatRoom</span><span class="params">(String channelId)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.channelId = channelId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMessage</span><span class="params">(V message)</span></span>&#123;</div><div class="line">		cache.put(channelId+<span class="string">":"</span>+nowMessageId, message);</div><div class="line">		nowMessageId += <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//根据用户id取出当前未读消息</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;V&gt; <span class="title">getAllMessage</span><span class="params">(String sid)</span></span>&#123;<span class="comment">//Web项目，该处用的是SessionId</span></div><div class="line"></div><div class="line">		Long messageId = reads.get(sid);</div><div class="line">		<span class="keyword">if</span>(messageId == <span class="keyword">null</span>)&#123;</div><div class="line">			messageId = nowMessageId;</div><div class="line">			reads.put(sid, messageId);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(messageId &gt;= nowMessageId)&#123;</div><div class="line">			<span class="keyword">return</span> Collections.emptyList();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		List&lt;V&gt; message = <span class="keyword">new</span> ArrayList&lt;V&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">while</span>(messageId &lt; nowMessageId)&#123;</div><div class="line">			V msg = cache.get(channelId+<span class="string">":"</span>+messageId);</div><div class="line">			<span class="keyword">if</span>(msg != <span class="keyword">null</span>)&#123;</div><div class="line">				message.add(msg);</div><div class="line">			&#125;</div><div class="line">			messageId ++;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		reads.put(sid, messageId);<span class="comment">//更新已读</span></div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getChannelId</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.channelId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNowMessageId</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.nowMessageId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ChatRoomManager"><a href="#ChatRoomManager" class="headerlink" title="ChatRoomManager"></a>ChatRoomManager</h3><p>房间管理器，负责管理所有ChatRoom，消息发送等，清除无用ChatRoom暂未实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xxx.core.redis.RedisPoolUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoomManager</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ChatRoomManager instance = <span class="keyword">new</span> ChatRoomManager();</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUB = <span class="string">"video:chat:"</span>;<span class="comment">//用于在Redis中订阅的订阅号前缀</span></div><div class="line"></div><div class="line">	<span class="keyword">private</span> Map&lt;String,ChatRoom&gt; rooms = <span class="keyword">new</span> HashMap&lt;String, ChatRoom&gt;();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">ChatRoomManager</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChatRoomManager <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> &lt;V&gt; <span class="function">ChatRoom&lt;V&gt;  <span class="title">getChatRoom</span><span class="params">(String roomId)</span></span>&#123;</div><div class="line">		ChatRoom room = rooms.get(roomId);</div><div class="line">		<span class="keyword">if</span>(room == <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">				room = rooms.get(roomId);</div><div class="line">				<span class="keyword">if</span>(room == <span class="keyword">null</span>)&#123;</div><div class="line">					room = <span class="keyword">new</span> ChatRoom&lt;String&gt;(roomId);</div><div class="line">					rooms.put(roomId, room);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> room;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> &lt;V&gt; <span class="function">ChatRoom&lt;V&gt;  <span class="title">getChatRoomAndRefresh</span><span class="params">(String roomId,String uid)</span></span>&#123;</div><div class="line">		ChatRoom room = rooms.get(roomId);</div><div class="line">		<span class="keyword">if</span>(room == <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">				room = rooms.get(roomId);</div><div class="line">				<span class="keyword">if</span>(room == <span class="keyword">null</span>)&#123;</div><div class="line">					room = <span class="keyword">new</span> ChatRoom&lt;String&gt;(roomId);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		refresh(roomId,uid);<span class="comment">//刷新房间内用户在线列表</span></div><div class="line">		<span class="keyword">return</span> room;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> ChatRoom <span class="title">removeRoom</span><span class="params">(String roomId)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> rooms.remove(roomId);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsRoom</span><span class="params">(String roomId)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> rooms.containsKey(roomId);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> &lt;V&gt; <span class="function">ChatRoom&lt;V&gt; <span class="title">addRoom</span><span class="params">(ChatRoom&lt;V&gt; room)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> rooms.put(room.getChannelId(), room);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//发送消息到指定Channel</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">pushMessage</span><span class="params">(String channel,String message)</span></span>&#123;</div><div class="line"></div><div class="line">		Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line">		Long count = jedis.publish(channel, message);</div><div class="line">		RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(String roomId,String uid)</span></span>&#123;</div><div class="line">		Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line">		jedis.setex(<span class="string">"chat:room:"</span>+roomId+<span class="string">":"</span>+uid, <span class="number">30</span>, <span class="string">"1"</span>);</div><div class="line">		RedisPoolUtils.release(jedis);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MessageListener"><a href="#MessageListener" class="headerlink" title="MessageListener"></a>MessageListener</h3><p>订阅Redis服务，监听消息并做分发处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPubSub;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> <span class="keyword">extends</span> <span class="title">JedisPubSub</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MessageListener.class);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> ChatRoomManager manager = ChatRoomManager.getInstance();</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String chanel, String message)</span> </span>&#123;</div><div class="line">		log.debug(<span class="string">"onMessage"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPMessage</span><span class="params">(String pattern, String channel, String message)</span> </span>&#123;</div><div class="line">		log.debug(<span class="string">"onPMessage[pattern:"</span>+pattern+<span class="string">",channel:"</span>+channel+<span class="string">",message:"</span>+message+<span class="string">"]"</span>);</div><div class="line">		<span class="comment">//用来处理psubscribe的消息,Dispatcher Message</span></div><div class="line">		ChatRoom&lt;String&gt; room = manager.getChatRoom(channel);</div><div class="line">		room.addMessage(message);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPSubscribe</span><span class="params">(String arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</div><div class="line">		log.debug(<span class="string">"onPSubscribe"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPUnsubscribe</span><span class="params">(String arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</div><div class="line">		log.debug(<span class="string">"onPUnsubscribe"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(String arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</div><div class="line">		log.debug(<span class="string">"onSubscribe"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUnsubscribe</span><span class="params">(String arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</div><div class="line">		log.debug(<span class="string">"onUnsubscribe"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ChatListener"><a href="#ChatListener" class="headerlink" title="ChatListener"></a>ChatListener</h3><p>异步监听类，有新消息就Publish到Redis中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.jms.Message;</div><div class="line"><span class="keyword">import</span> javax.jms.MessageListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQMapMessage;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xxx.core.redis.RedisPoolUtils;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ChatListener.class);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Jedis client = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">		ActiveMQMapMessage msg = (ActiveMQMapMessage) message;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(client == <span class="keyword">null</span> || !client.isConnected())&#123;</div><div class="line">				client = RedisPoolUtils.getJedis();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			String roomId = msg.getString(<span class="string">"roomId"</span>);</div><div class="line">			String content = msg.getString(<span class="string">"content"</span>);</div><div class="line"></div><div class="line">			client.publish(roomId, content);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			log.error(<span class="string">"异步实时交互信息发送异常"</span>, e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发送异步聊天消息的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendChatComment</span><span class="params">(String roomId,Map content)</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="keyword">final</span> ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">		JSONObject obj = JSONObject.fromObject(content);</div><div class="line">		message.setString(<span class="string">"roomId"</span>, ChatRoomManager.SUB+ roomId);</div><div class="line">		message.setString(<span class="string">"content"</span>, obj.toString());</div><div class="line"></div><div class="line">		jmsTemplate.send(chatDestination, <span class="keyword">new</span> MessageCreator() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">				<span class="keyword">return</span> message;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">	&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		log.error(<span class="string">"实时交互信息发送失败！"</span>,e);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="消息监听"><a href="#消息监听" class="headerlink" title="消息监听"></a>消息监听</h3><p>系统启动时，单启线程监听消息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xxx.common.util.DateUtils;</div><div class="line"><span class="keyword">import</span> com.xxx.core.chat.ChatRoomManager;</div><div class="line"><span class="keyword">import</span> com.xxx.core.chat.MessageListener;</div><div class="line"><span class="keyword">import</span> com.xxx.core.redis.RedisPoolUtils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 系统启动时监听通讯</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageChatBootstrap</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Logger log = LoggerFactory.getLogger(MessageChatBootstrap.class);</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		log.info(<span class="string">"ChatSystem Starting... At "</span>+DateUtils.formatDateTime(<span class="keyword">new</span> Date(), <span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line"></div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line">					jedis.psubscribe(<span class="keyword">new</span> MessageListener(), ChatRoomManager.SUB+<span class="string">"*"</span>);<span class="comment">//订阅所有 video:chat:*</span></div><div class="line">				&#125;</div><div class="line">			&#125;).start();</div><div class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			log.error(<span class="string">"即时聊天服务运行出错"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		log.info(<span class="string">"ChatSystem Starting finished! At "</span>+DateUtils.formatDateTime(<span class="keyword">new</span> Date(), <span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="前端访问接口-SpringMVC"><a href="#前端访问接口-SpringMVC" class="headerlink" title="前端访问接口(SpringMVC)"></a>前端访问接口(SpringMVC)</h3><p>前端Ajax长连接轮询接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.json.JSONArray;</div><div class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xxx.common.util.StringUtil;</div><div class="line"><span class="keyword">import</span> com.xxx.core.chat.ChatRoom;</div><div class="line"><span class="keyword">import</span> com.xxx.core.chat.ChatRoomManager;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_WAIT = <span class="number">10</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(ChatController.class);</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/chat/refresh"</span>,produces=<span class="string">"text/html;charset=utf-8"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">refresh</span><span class="params">(String roomId,HttpServletRequest request)</span></span>&#123;</div><div class="line">		log.debug(<span class="string">"roomId:"</span>+roomId);</div><div class="line">		ChatRoom&lt;String&gt; room = ChatRoomManager.getInstance().getChatRoom(ChatRoomManager.SUB+roomId);</div><div class="line"></div><div class="line">		String sid = request.getSession().getId();</div><div class="line"></div><div class="line">		List&lt;String&gt; messages = room.getAllMessage(sid);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(messages.size() == <span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">int</span> passTime = <span class="number">0</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">while</span>(passTime &lt; MAX_WAIT &amp;&amp; messages.size() == <span class="number">0</span>)&#123; <span class="comment">//等待10秒,Hold住请求</span></div><div class="line">					Thread.sleep(<span class="number">2000</span>);</div><div class="line">					passTime += <span class="number">2</span>;</div><div class="line"></div><div class="line">					messages = room.getAllMessage(sid);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		fileterSelf(messages,request.getSession());</div><div class="line"></div><div class="line">		String result =wrapMessage(messages);</div><div class="line"></div><div class="line">		log.debug(<span class="string">"result:"</span>+ result);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@Title</span>: fileterSelf</div><div class="line">	 * <span class="doctag">@Description</span>: 过滤掉自己发的消息</div><div class="line">	 * <span class="doctag">@param</span> <span class="doctag">@param</span> messages</div><div class="line">	 * <span class="doctag">@return</span> void</div><div class="line">	 * <span class="doctag">@throws</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fileterSelf</span><span class="params">(List&lt;String&gt; messages,HttpSession session)</span></span>&#123;</div><div class="line">		String uid = (String) session.getAttribute(<span class="string">"clientUserId"</span>);</div><div class="line">		<span class="keyword">if</span>(StringUtil.isNotBlank(uid)&amp;&amp;messages != <span class="keyword">null</span>&amp;&amp;messages.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">			Iterator&lt;String&gt; iterator = messages.iterator();</div><div class="line">			<span class="keyword">while</span>(iterator.hasNext())&#123;</div><div class="line">				String contetnt = iterator.next();</div><div class="line">				<span class="keyword">if</span>(contetnt.contains(uid))&#123;</div><div class="line">					iterator.remove();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">wrapMessage</span><span class="params">(List&lt;String&gt; message)</span></span>&#123;</div><div class="line"></div><div class="line">		JSONArray array = JSONArray.fromObject(message);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> array.toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="基于JQuery的JS模块实现"><a href="#基于JQuery的JS模块实现" class="headerlink" title="基于JQuery的JS模块实现"></a>基于JQuery的JS模块实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line"></div><div class="line">	$.Chat = (function()&#123;</div><div class="line">			var config = &#123;roomId:&apos;room1&apos;,url:&apos;/chat/refresh.html&apos;&#125;;</div><div class="line">			function init(conf)&#123;</div><div class="line">				config = $.extend(config,conf);</div><div class="line">			&#125;;</div><div class="line">			function start()&#123;</div><div class="line">				$.ajax(&#123;</div><div class="line">					type: &apos;post&apos;,</div><div class="line">					url: config.url,</div><div class="line">					data: &#123;</div><div class="line">						roomId: config.roomId</div><div class="line">					&#125;,</div><div class="line">					dataType: &apos;json&apos;,</div><div class="line">					success: function(response) &#123;</div><div class="line">					    $.Chat.execute(response);</div><div class="line">					    if(response.length &gt; 0)&#123;</div><div class="line">					    	setTimeout( start,1000);</div><div class="line">					    &#125;else&#123;</div><div class="line">					    	setTimeout( start,6000);</div><div class="line">					    &#125;</div><div class="line">					&#125;,</div><div class="line">					error: function(e) &#123;</div><div class="line">						console.log(e);</div><div class="line">					&#125;,</div><div class="line">					timeout: 20000</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			function execute(data)&#123;</div><div class="line">				console.log(data);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			return &#123;</div><div class="line">				start:start,</div><div class="line">				init:init,</div><div class="line">				execute:execute</div><div class="line">			&#125;;</div><div class="line">	&#125;)($);</div><div class="line"></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.Chat.init(&#123;roomId:&apos;xxxx&apos;&#125;); //url根据实际情况而定,ChatRoomManager.SUB + roomId即后台Redis发布订阅需要的ChannelID</div><div class="line">$.Chat.start();</div></pre></td></tr></table></figure>
<blockquote>
<p>Q &amp; A:<br><br>既然消息要缓存在服务器本地，为什么还要先发送到Redis，然后再从Redis中取回本地？<br><br><em>这样便使得消息可以分布式，以实现在分布式的环境下，客户端从每台服务器都可以获得订阅的消息</em></p>
<p>目前在自己的项目中基本能满足需求，且可以很容易的进行分布式，很容易扩展至多终端。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      实时聊天系统
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Spring" scheme="http://builderqiu.com/tags/Spring/"/>
    
      <category term="ActiveMQ" scheme="http://builderqiu.com/tags/ActiveMQ/"/>
    
      <category term="Redis" scheme="http://builderqiu.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>LinuxShell基础</title>
    <link href="http://builderqiu.com/2014/09/ShellDetails.html"/>
    <id>http://builderqiu.com/2014/09/ShellDetails.html</id>
    <published>2014-09-09T16:00:00.000Z</published>
    <updated>2016-12-24T14:32:12.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Shell"><a href="#什么是Shell" class="headerlink" title="什么是Shell"></a>什么是Shell</h2><p>Shell本身是一个用C语言编写的程序，它是用户使用Unix/Linux的桥梁，用户的大部分工作都是通过Shell完成的。Shell既是一种命令语言，又是一种程序设计语言。作为命令语言，它交互式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。</p>
<p>它虽然不是Unix/Linux系统内核的一部分，但它调用了系统核心的大部分功能来执行程序、建立文件并以并行的方式协调各个程序的运行。因此，对于用户来说，shell是最重要的实用程序，深入了解和熟练掌握shell的特性极其使用方法，是用好Unix/Linux系统的关键。</p>
<p>可以说，shell使用的熟练程度反映了用户对Unix/Linux使用的熟练程度。</p>
<p>注意：单独地学习 Shell 是没有意义的，请先了解 Unix/Linux 基础。</p>
<p>Shell有两种执行命令的方式：<br>交互式（Interactive）：解释执行用户的命令，用户输入一条命令，Shell就解释执行一条。<br>批处理（Batch）：用户事先写一个Shell脚本(Script)，其中有很多条命令，让Shell一次把这些命令执行完，而不必一条一条地敲命令。</p>
<p>Shell脚本和编程语言很相似，也有变量和流程控制语句，但Shell脚本是解释执行的，不需要编译，Shell程序从脚本中一行一行读取并执行这些命令，相当于一个用户把脚本中的命令一行一行敲到Shell提示符下执行。</p>
<p>Shell初学者请注意，在平常应用中，建议不要用 root 帐号运行 Shell 。作为普通用户，不管您有意还是无意，都无法破坏系统；但如果是 root，那就不同了，只要敲几个字母，就可能导致灾难性后果。<br><a id="more"></a></p>
<h2 id="几种常见的Shell"><a href="#几种常见的Shell" class="headerlink" title="几种常见的Shell"></a>几种常见的Shell</h2><p>Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器。</p>
<h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><p>bash是Linux标准默认的shell，本教程也基于bash讲解。bash由Brian Fox和Chet Ramey共同完成，是BourneAgain Shell的缩写，内部命令一共有40个。</p>
<p>Linux使用它作为默认的shell是因为它有诸如以下的特色：<br>可以使用类似DOS下面的doskey的功能，用方向键查阅和快速输入并修改命令。<br>自动通过查找匹配的方式给出以某字符串开头的命令。<br>包含了自身的帮助功能，你只要在提示符下面键入help就可以得到相关的帮助。</p>
<h3 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h3><p>sh 由Steve Bourne开发，是Bourne Shell的缩写，sh 是Unix 标准默认的shell。</p>
<h3 id="ash"><a href="#ash" class="headerlink" title="ash"></a>ash</h3><p>ash shell 是由Kenneth Almquist编写的，Linux中占用系统资源最少的一个小shell，它只包含24个内部命令，因而使用起来很不方便。</p>
<h3 id="csh"><a href="#csh" class="headerlink" title="csh"></a>csh</h3><p>csh 是Linux比较大的内核，它由以William Joy为代表的共计47位作者编成，共有52个内部命令。该shell其实是指向/bin/tcsh这样的一个shell，也就是说，csh其实就是tcsh。</p>
<h3 id="ksh"><a href="#ksh" class="headerlink" title="ksh"></a>ksh</h3><p>ksh 是Korn shell的缩写，由Eric Gisin编写，共有42条内部命令。该shell最大的优点是几乎和商业发行版的ksh完全兼容，这样就可以在不用花钱购买商业版本的情况下尝试商业版本的性能了。</p>
<p>注意：bash是 Bourne Again Shell 的缩写，是linux标准的默认shell ，它基于Bourne shell，吸收了C shell和Korn shell的一些特性。bash完全兼容sh，也就是说，用sh写的脚本可以不加修改的在bash中执行。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$0</td>
<td>当前脚本的文件名</td>
</tr>
<tr>
<td>$n</td>
<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>
</tr>
<tr>
<td>$#</td>
<td>传递给脚本或函数的参数个数。</td>
</tr>
<tr>
<td>$*</td>
<td>传递给脚本或函数的所有参数。</td>
</tr>
<tr>
<td>$@</td>
<td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>
</tr>
<tr>
<td>$?</td>
<td>上个命令的退出状态，或函数的返回值。</td>
</tr>
<tr>
<td>$$</td>
<td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>
</tr>
</tbody>
</table>
<center>特殊变量列表</center>

<h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别"></a>$* 和 $@ 的区别</h3><p>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</p>
<p>但是当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</p>
<h3 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h3><p>$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。</p>
<p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p>
<p>不过，也有一些命令返回其他值，表示不同类型的错误。</p>
<p>下面的转义字符都可以用在 echo 中：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>\a</td>
<td>警报，响铃</td>
</tr>
<tr>
<td>\b</td>
<td>退格（删除键）</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表符（tab键）</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符</td>
</tr>
</tbody>
</table>
<p>可以使用 echo 命令的 -E 选项禁止转义，默认也是不转义的；使用 -n 选项可以禁止插入换行符。</p>
<h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><p>命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。</p>
<p>命令替换的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`command`</div></pre></td></tr></table></figure>
<p>注意是反引号，不是单引号，这个键位于 Esc 键下方。</p>
<h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值</p>
<p>可以使用的变量替换形式：</p>
<table>
<thead>
<tr>
<th>形式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>${var}</td>
<td>变量本来的值</td>
</tr>
<tr>
<td>${var:-word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。</td>
</tr>
<tr>
<td>${var:=word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word。</td>
</tr>
<tr>
<td>${var:?message}</td>
<td>如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值。若此替换出现在Shell脚本中，那么脚本将停止运行。</td>
</tr>
<tr>
<td>${var:+word}</td>
<td>如果变量 var 被定义，那么返回 word，但不改变 var 的值。</td>
</tr>
</tbody>
</table>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code>，<code>expr</code> 最常用。</p>
<p><code>expr</code>是一款表达式计算工具，使用它能完成表达式的求值操作。</p>
<p>例如，两个数相加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">val=`expr 6 \* 3`</div><div class="line">echo &quot;Total value : $val&quot;</div></pre></td></tr></table></figure>
<p>运行脚本输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Total value : 18</div></pre></td></tr></table></figure>
<p>两点注意：</p>
<ol>
<li>表达式和运算符之间要有空格，例如 6*3 是不对的，必须写成 6 * 3，这与我们熟悉的大多数编程语言不一样。</li>
<li>完整的表达式要被 <code> </code> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li>
</ol>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法</td>
<td><code>expr $a + $b</code> 结果为 30。</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td><code>expr $a - $b</code> 结果为 10。</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td><code>expr $a \* $b</code> 结果为  200。</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td><code>expr $b / $a</code> 结果为 2。</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td><code>expr $b % $a</code> 结果为 0。</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=$b 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td>==</td>
<td>相等。用于比较两个数字，相同则返回 true。</td>
<td>[ $a == $b ] 返回 false。</td>
</tr>
<tr>
<td>!=</td>
<td>不相等。用于比较两个数字，不相同则返回 true。</td>
<td>[ $a != $b ] 返回 true。</td>
</tr>
</tbody>
</table>
<center>算术运算符列表</center>


<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>检测两个数是否相等，相等返回 true。</td>
<td>[ $a -eq $b ] 返回 true。</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两个数是否相等，不相等返回 true。</td>
<td>[ $a -ne $b ] 返回 true。</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>
<td>[ $a -gt $b ] 返回 false。</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>
<td>[ $a -lt $b ] 返回 true。</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大等于右边的，如果是，则返回 true。</td>
<td>[ $a -ge $b ] 返回 false。</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>
<td>[ $a -le $b ] 返回 true。</td>
</tr>
</tbody>
</table>
<center>关系运算符列表</center>


<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>
<td>[ ! false ] 返回 true。</td>
</tr>
<tr>
<td>-o</td>
<td>或运算，有一个表达式为 true 则返回 true。</td>
<td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>
</tr>
<tr>
<td>-a</td>
<td>与运算，两个表达式都为 true 才返回 true。</td>
<td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>
</tr>
</tbody>
</table>
<center>布尔运算符列表</center>


<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>检测两个字符串是否相等，相等返回 true。</td>
<td>[ $a = $b ] 返回 false。</td>
</tr>
<tr>
<td>!=</td>
<td>检测两个字符串是否相等，不相等返回 true。</td>
<td>[ $a != $b ] 返回 true。</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0，为0返回 true。</td>
<td>[ -z $a ] 返回 false。</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否为0，不为0返回 true。</td>
<td>[ -z $a ] 返回 true。</td>
</tr>
<tr>
<td>str</td>
<td>检测字符串是否为空，不为空返回 true。</td>
<td>[ $a ] 返回 true。</td>
</tr>
</tbody>
</table>
<center>字符串运算符列表</center>


<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b file</td>
<td>检测文件是否是块设备文件，如果是，则返回 true。</td>
<td>[ -b $file ] 返回 false。</td>
</tr>
<tr>
<td>-c file</td>
<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>
<td>[ -b $file ] 返回 false。</td>
</tr>
<tr>
<td>-d file</td>
<td>检测文件是否是目录，如果是，则返回 true。</td>
<td>[ -d $file ] 返回 false。</td>
</tr>
<tr>
<td>-f file</td>
<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>
<td>[ -f $file ] 返回 true。</td>
</tr>
<tr>
<td>-g file</td>
<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>
<td>[ -g $file ] 返回 false。</td>
</tr>
<tr>
<td>-k file</td>
<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>
<td>[ -k $file ] 返回 false。</td>
</tr>
<tr>
<td>-p file</td>
<td>检测文件是否是具名管道，如果是，则返回 true。</td>
<td>[ -p $file ] 返回 false。</td>
</tr>
<tr>
<td>-u file</td>
<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>
<td>[ -u $file ] 返回 false。</td>
</tr>
<tr>
<td>-r file</td>
<td>检测文件是否可读，如果是，则返回 true。</td>
<td>[ -r $file ] 返回 true。</td>
</tr>
<tr>
<td>-w file</td>
<td>检测文件是否可写，如果是，则返回 true。</td>
<td>[ -w $file ] 返回 true。</td>
</tr>
<tr>
<td>-x file</td>
<td>检测文件是否可执行，如果是，则返回 true。</td>
<td>[ -x $file ] 返回 true。</td>
</tr>
<tr>
<td>-s file</td>
<td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>
<td>[ -s $file ] 返回 true。</td>
</tr>
<tr>
<td>-e file</td>
<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>
<td>[ -e $file ] 返回 true。</td>
</tr>
</tbody>
</table>
<center>文件测试运算符列表</center>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p>
<p>在Shell中，用括号来表示数组，数组元素用“空格”符号分割开。定义数组的一般形式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_name=(value1 ... valuen)</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_name=(value0 value1 value2 value3)</div></pre></td></tr></table></figure>
<p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 取得数组元素的个数</div><div class="line">length=$&#123;#array_name[@]&#125;</div><div class="line"># 或者</div><div class="line">length=$&#123;#array_name[*]&#125;</div><div class="line"># 取得数组单个元素的长度</div><div class="line">lengthn=$&#123;#array_name[n]&#125;</div></pre></td></tr></table></figure>
<p>##判断语句</p>
<p>###if</p>
<p>语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if … else 语句：</p>
<ol>
<li>if … fi 语句；</li>
<li>if … else … fi 语句；</li>
<li>if … elif … else … fi 语句。</li>
</ol>
<p>1) if … else 语句</p>
<p>if … else 语句的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ expression ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression is true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>2) if … else … fi 语句</p>
<p>if … else … fi 语句的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if [ expression ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression is true</div><div class="line">else</div><div class="line">   Statement(s) to be executed if expression is not true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>3) if … elif … fi 语句</p>
<p>if … elif … fi 语句可以对多个条件进行判断，语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if [ expression 1 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 1 is true</div><div class="line">elif [ expression 2 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 2 is true</div><div class="line">elif [ expression 3 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 3 is true</div><div class="line">else</div><div class="line">   Statement(s) to be executed if no expression is true</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="case-…-esac"><a href="#case-…-esac" class="headerlink" title="case … esac"></a>case … esac</h3><p>与其他语言中的 switch … case 语句类似，是一种多分枝选择结构。</p>
<p>case 语句匹配一个值或一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">case 值 in</div><div class="line">模式1)</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">模式2）</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">*)</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>case工作方式如上所示。取值后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。;; 与其他语言中的 break 类似，意思是跳到整个 case 语句的最后。</p>
<p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环一般格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for 变量 in 列表</div><div class="line">do</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    ...</div><div class="line">    commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<p>列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就将列表中的下一个值赋给变量。<br>in 列表是可选的，如果不用它，for 循环使用命令行的位置参数。</p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while command</div><div class="line">do</div><div class="line">   Statement(s) to be executed if command is true</div><div class="line">done</div></pre></td></tr></table></figure>
<p>命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假。</p>
<h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><p>until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候，也只是极少数情况下，until 循环更加有用。</p>
<p>until 循环格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">until command</div><div class="line">do</div><div class="line">   Statement(s) to be executed until command is true</div><div class="line">done</div></pre></td></tr></table></figure>
<p>command 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。像其他编程语言一样，Shell 也支持函数。Shell 函数必须先定义后使用。</p>
<p>Shell 函数的定义格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function_name () &#123;</div><div class="line">    list of commands</div><div class="line">    [ return value ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你愿意，也可以在函数名前加上关键字 function：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function function_name () &#123;</div><div class="line">    list of commands</div><div class="line">    [ return value ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</p>
<p>Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。如果 return 其他数据，比如一个字符串，往往会得到错误提示：“numeric argument required”。</p>
<p>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值。</p>
<blockquote>
<p>调用函数只需要给出函数名，不需要加括号。</p>
</blockquote>
<p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p>
<p>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</p>
<p>另外，还有几个特殊变量用来处理参数，前面已经提到：</p>
<table>
<thead>
<tr>
<th>特殊变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$#</td>
<td>传递给函数的参数个数。</td>
</tr>
<tr>
<td>$*</td>
<td>显示所有传递给函数的参数。</td>
</tr>
<tr>
<td>$@</td>
<td>与$*相同，但是略有区别。</td>
</tr>
<tr>
<td>$?</td>
<td>函数的返回值。</td>
</tr>
</tbody>
</table>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>
<ol>
<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>
<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>
<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li>
</ol>
<p>默认情况下，<code>command &gt; file</code> 将 stdout 重定向到 file，<code>command &lt; file</code> 将stdin 重定向到 file。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>command &gt; file</td>
<td>将输出重定向到 file。</td>
</tr>
<tr>
<td>command &lt; file</td>
<td>将输入重定向到 file。</td>
</tr>
<tr>
<td>command &gt;&gt; file</td>
<td>将输出以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt; file</td>
<td>将文件描述符为 n 的文件重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&gt; file</td>
<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&amp; m</td>
<td>将输出文件 m 和 n 合并。</td>
</tr>
<tr>
<td>n &lt;&amp; m</td>
<td>将输入文件 m 和 n 合并。</td>
</tr>
<tr>
<td>&lt;&lt; tag</td>
<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>
</tr>
</tbody>
</table>
<center>全部可用的重定向命令列表</center>

<p>###/dev/null 文件</p>
<p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 <code>/dev/null</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ command &gt; /dev/null</div></pre></td></tr></table></figure>
<p><code>/dev/null</code> 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 <code>/dev/null</code> 文件非常有用，将命令的输出重定向到它，会起到”禁止输出“的效果。</p>
<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ command &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>
<h2 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h2><p>像其他语言一样，Shell 也可以包含外部脚本，将外部脚本的内容合并到当前脚本。</p>
<p>Shell 中包含脚本可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. filename</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source filename</div></pre></td></tr></table></figure>
<p>两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。</p>
<hr>
<blockquote>
<p>参考至：<a href="http://see.xidian.edu.cn/cpp/view/6994.html" target="_blank" rel="external">shell</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      Shell基础知识
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="Shell" scheme="http://builderqiu.com/tags/Shell/"/>
    
      <category term="Linux" scheme="http://builderqiu.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ant模式通配符</title>
    <link href="http://builderqiu.com/2014/09/SpringAntWildcards.html"/>
    <id>http://builderqiu.com/2014/09/SpringAntWildcards.html</id>
    <published>2014-09-03T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:32.704Z</updated>
    
    <content type="html"><![CDATA[<p>Spring提供了强大的Ant模式通配符匹配，从同一个路径能匹配一批资源。</p>
<p>Ant路径通配符支持<code>&quot;?&quot;</code>、<code>&quot;*&quot;</code>、<code>&quot;**&quot;</code>，注意通配符匹配不包括目录分隔符<code>“/”</code>。</p>
<ol>
<li><p><code>“?”</code>:匹配一个字符，如<code>&quot;config?.xml&quot;</code>可匹配<code>&quot;config1.xml&quot;</code>.</p>
</li>
<li><p><code>“*”</code>：匹配零个或多个字符串，如<code>“com/*/config.xml”</code>将匹配<code>“cn/feng/config.xml”</code>,但不匹配匹配<code>“com/config.xml”</code>(因为这里匹配的是字符串，如果是目录的话则可以)；而<code>“com/config-*.xml”</code>将匹配<code>“com/config-dao.xml”</code>；</p>
</li>
<li><p><code>&quot;**&quot;</code>：匹配路径中的零个或多个目录。如<code>“com/**/config.xml”</code>将匹配<code>“com/config.xml”</code>,也匹配<code>“com/feng/spring/config.xml”</code>；而<code>“com/feng/config-**.xml”</code>将匹配  <code>“com/feng/config-dao.xml”</code>，即把<code>“**”</code>当做两个<code>“*”</code>处理。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring提供了强大的Ant模式通配符匹配，从同一个路径能匹配一批资源。&lt;/p&gt;
&lt;p&gt;Ant路径通配符支持&lt;code&gt;&amp;quot;?&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;**&amp;quot;&lt;/code&gt;，
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Spring" scheme="http://builderqiu.com/tags/Spring/"/>
    
      <category term="通配符" scheme="http://builderqiu.com/tags/%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>简单的Java缓存实现</title>
    <link href="http://builderqiu.com/2014/09/JavaCacheSampleImpl.html"/>
    <id>http://builderqiu.com/2014/09/JavaCacheSampleImpl.html</id>
    <published>2014-09-02T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:49.866Z</updated>
    
    <content type="html"><![CDATA[<p>提到缓存，不得不提就是缓存算法(淘汰算法)，常见算法有LRU、LFU和FIFO等算法，每种算法各有各的优势和缺点及适应环境。</p>
<h3 id="1、LRU-Least-Recently-Used-，最近最少使用"><a href="#1、LRU-Least-Recently-Used-，最近最少使用" class="headerlink" title="1、LRU(Least Recently Used ，最近最少使用)"></a>1、LRU(Least Recently Used ，最近最少使用)</h3><p>算法根据数据的最近访问记录来淘汰数据，其原理是如果数据最近被访问过，将来被访问的几概率相对比较高，最常见的实现是使用一个链表保存缓存数据，详细具体算法如下：</p>
<ol>
<li>新数据插入到链表头部；</li>
<li>每当缓存数据命中，则将数据移到链表头部；</li>
<li>当链表满的时候，将链表尾部的数据丢弃；</li>
</ol>
<h3 id="2、LFU-Least-Frequently-Used，最不经常使用"><a href="#2、LFU-Least-Frequently-Used，最不经常使用" class="headerlink" title="2、LFU(Least Frequently Used，最不经常使用)"></a>2、LFU(Least Frequently Used，最不经常使用)</h3><p>算法根据数据的历史访问频率来淘汰数据，其原理是如果数据过去被访问次数越多，将来被访问的几概率相对比较高。LFU的每个数据块都有一个引用计数，所有数据块按照引用计数排序，具有相同引用计数的数据块则按照时间排序。<br>具体算法如下：</p>
<ol>
<li>新加入数据插入到队列尾部（因为引用计数为1）；</li>
<li>队列中的数据被访问后，引用计数增加，队列重新排序；</li>
<li>当需要淘汰数据时，将已经排序的列表最后的数据块删除；</li>
</ol>
<h3 id="3、FIFO-First-In-First-Out-，先进先出"><a href="#3、FIFO-First-In-First-Out-，先进先出" class="headerlink" title="3、FIFO(First In First Out ，先进先出)"></a>3、FIFO(First In First Out ，先进先出)</h3><p>算法是根据先进先出原理来淘汰数据的，实现上是最简单的一种,具体算法如下：</p>
<ol>
<li>新访问的数据插入FIFO队列尾部，数据在FIFO队列中顺序移动；</li>
<li>淘汰FIFO队列头部的数据；</li>
</ol>
<a id="more"></a>
<p>评价一个缓存算法好坏的标准主要有两个，一是命中率要高，二是算法要容易实现。当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。LFU效率要优于LRU，且能够避免周期性或者偶发性的操作导致缓存命中率下降的问题。但LFU需要记录数据的历史访问记录，一旦数据访问模式改变，LFU需要更长时间来适用新的访问模式，即：LFU存在历史数据影响将来数据的“缓存污染”效用。FIFO虽然实现很简单，但是命中率很低，实际上也很少使用这种算法。</p>
<p>基于现有jdk类库，我们可以很容易实现上面的缓存算法</p>
<p>首先定义缓存接口类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 缓存接口</div><div class="line"> * <span class="doctag">@author</span> Wen</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回当前缓存的大小</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回默认存活时间</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDefaultExpire</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向缓存添加value对象,其在缓存中生存时间为默认值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(K key ,V value)</span> </span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向缓存添加value对象,并指定存活时间</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@param</span> expire  过期时间</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(K key ,V value , <span class="keyword">long</span> expire )</span> </span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查找缓存对象</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">V <span class="title">get</span><span class="params">(K key)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 淘汰对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  被删除对象大小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">eliminate</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 缓存是否已经满</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除缓存对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清除所有缓存对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回缓存大小</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCacheSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 缓存中是否为空</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本实现抽象类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 默认实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCacheMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CacheObject</span>&lt;<span class="title">K2</span>,<span class="title">V2</span>&gt; </span>&#123;</div><div class="line">        CacheObject(K2 key, V2 value, <span class="keyword">long</span> ttl) &#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.cachedObject = value;</div><div class="line">            <span class="keyword">this</span>.ttl = ttl;</div><div class="line">            <span class="keyword">this</span>.lastAccess = System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> K2 key;</div><div class="line">        <span class="keyword">final</span> V2 cachedObject;</div><div class="line">        <span class="keyword">long</span> lastAccess;        <span class="comment">// 最后访问时间</span></div><div class="line">        <span class="keyword">long</span> accessCount;       <span class="comment">// 访问次数</span></div><div class="line">        <span class="keyword">long</span> ttl;               <span class="comment">// 对象存活时间(time-to-live)</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ttl == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> lastAccess + ttl &lt; System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line">        <span class="function">V2 <span class="title">getObject</span><span class="params">()</span> </span>&#123;</div><div class="line">            lastAccess = System.currentTimeMillis();</div><div class="line">            accessCount++;</div><div class="line">            <span class="keyword">return</span> cachedObject;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Map&lt;K,CacheObject&lt;K,V&gt;&gt; cacheMap;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock cacheLock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock readLock = cacheLock.readLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock writeLock = cacheLock.writeLock();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> cacheSize;      <span class="comment">// 缓存大小 , 0 -&gt; 无限制</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span>  <span class="keyword">boolean</span> existCustomExpire ; <span class="comment">//是否设置默认过期时间</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCacheSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cacheSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> defaultExpire;     <span class="comment">// 默认过期时间, 0 -&gt; 永不过期</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractCacheMap</span><span class="params">(<span class="keyword">int</span> cacheSize ,<span class="keyword">long</span> defaultExpire)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.cacheSize  = cacheSize ;</div><div class="line">        <span class="keyword">this</span>.defaultExpire  = defaultExpire ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDefaultExpire</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> defaultExpire;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isNeedClearExpiredObject</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> defaultExpire &gt; <span class="number">0</span> || existCustomExpire ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        put(key, value, defaultExpire );</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value, <span class="keyword">long</span> expire)</span> </span>&#123;</div><div class="line">        writeLock.lock();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            CacheObject&lt;K,V&gt; co = <span class="keyword">new</span> CacheObject&lt;K,V&gt;(key, value, expire);</div><div class="line">            <span class="keyword">if</span> (expire != <span class="number">0</span>) &#123;</div><div class="line">                existCustomExpire = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (isFull()) &#123;</div><div class="line">                eliminate() ;</div><div class="line">            &#125;</div><div class="line">            cacheMap.put(key, co);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            writeLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">        readLock.lock();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            CacheObject&lt;K,V&gt; co = cacheMap.get(key);</div><div class="line">            <span class="keyword">if</span> (co == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (co.isExpired() == <span class="keyword">true</span>) &#123;</div><div class="line">                cacheMap.remove(key);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> co.getObject();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            readLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">eliminate</span><span class="params">()</span> </span>&#123;</div><div class="line">        writeLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> eliminateCache();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            writeLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 淘汰对象具体实现</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">eliminateCache</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cacheSize == <span class="number">0</span>) &#123;<span class="comment">//o -&gt; 无限制</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cacheMap.size() &gt;= cacheSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">        writeLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cacheMap.remove(key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            writeLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        writeLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cacheMap.clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            writeLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cacheMap.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LRU缓存实现类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * LRU  实现</div><div class="line"> * <span class="doctag">@author</span> Wen</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;K&gt;</div><div class="line"> * <span class="doctag">@param</span> &lt;V&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCacheMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> cacheSize, <span class="keyword">long</span> defaultExpire)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>(cacheSize , defaultExpire) ;</div><div class="line"></div><div class="line">        <span class="comment">//linkedHash已经实现LRU算法 是通过双向链表来实现，当某个位置被命中，通过调整链表的指向将该位置调整到头位置，新加入的内容直接放在链表头，如此一来，最近被命中的内容就向链表头移动，需要替换时，链表最后的位置就是最近最少使用的位置</span></div><div class="line">        <span class="keyword">this</span>.cacheMap = <span class="keyword">new</span> LinkedHashMap&lt;K, CacheObject&lt;K, V&gt;&gt;( cacheSize +<span class="number">1</span> , <span class="number">1f</span>,<span class="keyword">true</span> ) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(</span></span></div><div class="line">                    Map.Entry&lt;K, CacheObject&lt;K, V&gt;&gt; eldest) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> LRUCache.<span class="keyword">this</span>.removeEldestEntry(eldest);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, CacheObject&lt;K, V&gt;&gt; eldest)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cacheSize == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> size() &gt; cacheSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 只需要实现清除过期对象就可以了,linkedHashMap已经实现LRU</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">eliminateCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!isNeedClearExpiredObject())&#123; <span class="keyword">return</span> <span class="number">0</span> ;&#125;</div><div class="line"></div><div class="line">        Iterator&lt;CacheObject&lt;K, V&gt;&gt; iterator = cacheMap.values().iterator();</div><div class="line">        <span class="keyword">int</span> count  = <span class="number">0</span> ;</div><div class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</div><div class="line">            CacheObject&lt;K, V&gt; cacheObject = iterator.next();</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(cacheObject.isExpired() )&#123;</div><div class="line">                iterator.remove();</div><div class="line">                count++ ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LFU实现类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"></div><div class="line"><span class="comment">//LFU实现</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCacheMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache</span><span class="params">(<span class="keyword">int</span> cacheSize, <span class="keyword">long</span> defaultExpire)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(cacheSize, defaultExpire);</div><div class="line">        cacheMap = <span class="keyword">new</span> HashMap&lt;K, CacheObject&lt;K,V&gt;&gt;(cacheSize+<span class="number">1</span>) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实现删除过期对象 和 删除访问次数最少的对象</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">eliminateCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        Iterator&lt;CacheObject&lt;K, V&gt;&gt; iterator = cacheMap.values().iterator();</div><div class="line">        <span class="keyword">int</span> count  = <span class="number">0</span> ;</div><div class="line">        <span class="keyword">long</span> minAccessCount = Long.MAX_VALUE  ;</div><div class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</div><div class="line">            CacheObject&lt;K, V&gt; cacheObject = iterator.next();</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(cacheObject.isExpired() )&#123;</div><div class="line">                iterator.remove();</div><div class="line">                count++ ;</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                minAccessCount  = Math.min(cacheObject.accessCount , minAccessCount)  ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span> ) <span class="keyword">return</span> count ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(minAccessCount != Long.MAX_VALUE )&#123;</div><div class="line"></div><div class="line">            iterator = cacheMap.values().iterator();</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</div><div class="line">                CacheObject&lt;K, V&gt; cacheObject = iterator.next();</div><div class="line"></div><div class="line">                cacheObject.accessCount  -=  minAccessCount ;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(cacheObject.accessCount &lt;= <span class="number">0</span> )&#123;</div><div class="line">                    iterator.remove();</div><div class="line">                    count++ ;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FIFO实现类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * FIFO实现</div><div class="line"> * <span class="doctag">@author</span> Wen</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;K&gt;</div><div class="line"> * <span class="doctag">@param</span> &lt;V&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIFOCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCacheMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FIFOCache</span><span class="params">(<span class="keyword">int</span> cacheSize, <span class="keyword">long</span> defaultExpire)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(cacheSize, defaultExpire);</div><div class="line">        cacheMap = <span class="keyword">new</span> LinkedHashMap&lt;K, CacheObject&lt;K, V&gt;&gt;(cacheSize + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">eliminateCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        K firstKey = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        Iterator&lt;CacheObject&lt;K, V&gt;&gt; iterator = cacheMap.values().iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            CacheObject&lt;K, V&gt; cacheObject = iterator.next();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (cacheObject.isExpired()) &#123;</div><div class="line">                iterator.remove();</div><div class="line">                count++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (firstKey == <span class="keyword">null</span>)</div><div class="line">                    firstKey = cacheObject.key;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (firstKey != <span class="keyword">null</span> &amp;&amp; isFull()) &#123;<span class="comment">//删除过期对象还是满,继续删除链表第一个</span></div><div class="line">            cacheMap.remove(firstKey);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原文：<a href="http://my.oschina.net/u/866190/blog/188712" target="_blank" rel="external">简单的java缓存实现</a></p>
]]></content>
    
    <summary type="html">
    
      Java缓存实现方式
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="Java" scheme="http://builderqiu.com/tags/Java/"/>
    
      <category term="Cache" scheme="http://builderqiu.com/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>如何构建Java Web应用的session框架</title>
    <link href="http://builderqiu.com/2014/08/JavaWebSessionFramework.html"/>
    <id>http://builderqiu.com/2014/08/JavaWebSessionFramework.html</id>
    <published>2014-08-29T16:00:00.000Z</published>
    <updated>2016-12-24T14:31:55.254Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://imtiger.net/blog/2012/05/10/how-to-build-a-session-framework-for-java-web-application/" target="_blank" rel="external">原文地址</a>  </p>
<p>做web开发的朋友都知道，一个网站在发展的过程中，随着流量的不断增加，必然会遇到伸缩性的问题，虽然目前硬件的价格已经在减低，有时候可以通过垂直伸缩的方式来达到应对访问量不断增加的麻烦，但是垂直伸缩总是会遇到瓶颈，那么此时就需要水平伸缩了。当水平伸缩的时候，最重要的一点就是状态管理，而web应用的状态通产采用httpsession的管理方式，不同的web server(比如tomcat,jboss,jetty等等)都提供了对httpsession的支持，但是webserver通常采用了集群节点之间互相复制session状态的方式来进行状态管理，这样随着集群节点的增加，集群之间的复制的开销会越来越大，这从某种程度上来说也限制了应用的伸缩性。本文就简单总结一下构建一个Java web 应用的session框架的思路是什么样子。<br><a id="more"></a><br>本文将会从session状态的存储，session信息的管理，安全性问题，以及如何与Servlet Container结合。</p>
<blockquote>
<p>在开始之前，我们首先需要明确一点这里所说的session的概念是广义的，不仅仅是指httpSession。</p>
</blockquote>
<h2 id="Session状态存储"><a href="#Session状态存储" class="headerlink" title="Session状态存储"></a>Session状态存储</h2><p>咋们首先来谈谈Session状态的存储。我们先来看看平常的日常工作当中，我们是怎么存储Session状态信息的。我们举个例子来说，比如用户的浏览历史，我们可能会将其保存在http cookie中，另外比如用户是否登陆的信息，我们可能选择保存在httpsession之中。上面说了存储到httpsession中会受限于web server的实现，伸缩性有限。那么我们在构建session框架的时候，可以考虑用一个分布式的缓存服务器来存储session状态，比如可以利用memecached服务器来进行存储。</p>
<p>另外这里面也涉及到另外一个问题，状态的跟踪问题，我们如何区分不同的用户的session信息？这里其实就需要通过cookie来实现了，我们会给每个用户产生的session分配一个唯一的Id，把这个id存放在cookie中，当用户请求服务器的时候会带上sessionId,服务器从cookie中获取sessionId后可以根据Id从缓存中获取到session状态信息。</p>
<p>说到这里，可能有同学会问？为什么我们不能把信息都放到cookie中，这样服务器端都不用存储任何的状态信息，这样对于服务器来说不也是无状态了吗？其实这里面主要涉及安全性以及浏览器的实现问题，因为存储到cookie中的信息是不安全的，黑客可以进行cookie劫持，这样你保存到cookie中的信息就会被非法用户获取了。另外我们知道不同的浏览器对cookie数量以及大小是有限制的，比如IE8限制cookie的大小为4095字节，每个域名cookie的数量为50个，这样以来就可能会遇到cookie丢失的问题。</p>
<p>综上，Session状态的存储，我们需要结合客户端存储和服务器端存储，在客户端存储中，我们借用http cookie来存储sessionId,而session的具体信息我们可以存放到服务器端，而具体实现的过程中，我们可以将起放入分布式缓存服务器中。</p>
<h2 id="Session信息的管理"><a href="#Session信息的管理" class="headerlink" title="Session信息的管理"></a>Session信息的管理</h2><p>接下来我们再来说说Session信息管理，一些公司可能对这块没有什么重视，session状态的管理完全依赖于开发人员自己，开发人员可以随意将信息写入到cookie或者httpsession中，这样造成的问题就是session状态混乱，最后随着开发人员的离职，新来的人只能通过查看源代码的方式来了解session中都放入了什么信息，到后来可能公司没人知道在cookie或者httpsession中到底存放了哪些信息了？这对与系统的维护以及扩展都是不利的，那么怎么解决这个问题？</p>
<p>其实这个时候我们就可以通过session信息的统一配置话管理来解决了。具体来说就是Session框架通过一个配置文件对可放入的session信息进行统一的管理，要想往cookie或者服务器session中放入任何信息都要在配置文件中配置，这样才容许写入。这样要知道session中存放了哪些信息只需要查看配置文件即可知道了。</p>
<p>不过采用配置文件管理session信息了以后，可能又会遇到一个问题，配置文件如何管理？这个不同的公司可以有不同的做法，比如配置文件可以存放在数据库中，session框架启动的时候去数据库查询到最新的配置信息，或者也可以将其放入classpath文件中，session框架通过启动的时候去classpath中获取，另外一些公司都有统一的配置管理服务器，这样可以将session配置也纳入到配置管理服务器中，这样就更加规范了。</p>
<h2 id="信息安全性问题"><a href="#信息安全性问题" class="headerlink" title="信息安全性问题"></a>信息安全性问题</h2><p>上面说了session信息的存储，我们的Session框架要支持两种存储方式，一种是cookie的客户端存储，一种是存储到服务端，当存储到客户端cookie中的，信息容易被非法意图的人窃取，如果什么信息都明文保存在cookie中，那么就存在用户信息泄露的风险。那么此时就需要对放入cookie的信息进行加密处理。关于加密和解密算法本人也没有深入研究过，不过这方面已经有很多人给出了解决方案。我在写Session框架的时候，采用了Blowfish，有兴趣的同学可以去看看。</p>
<h2 id="如何与Servlet-Container结合"><a href="#如何与Servlet-Container结合" class="headerlink" title="如何与Servlet Container结合"></a>如何与Servlet Container结合</h2><p>本文的最后，咋们来看看在Java web 开发中，自己开发的Session框架如何与Servlet 容器结合起来。 Servlet规范中有过滤器的概念，过滤器是每个请求过来的时候，可以在请求进入Servlet之前和之后可以做一些通用的事情，那么我们的Session框架可以提供一个SessionFilter纳入到Servlet容器的管理。下面通过一个简单图来形象的描述一下Session框架中主要的角色。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7vzn9h.com1.z0.glb.clouddn.com/images/blog/sessionFramework.jpg" alt="sessionFramework" title="">
                </div>
                <div class="image-caption">sessionFramework</div>
            </figure>
<center>上图中绿色的部分为Session框架的核心部分，我们下面分别来描述一下。</center>

<h3 id="SessionFilter"><a href="#SessionFilter" class="headerlink" title="SessionFilter"></a>SessionFilter</h3><p><code>SessionFilter</code>的主要职责就是对web server生成的<code>HttpServletRequest</code>和<code>HttpServletReponse</code>进行封装，将其封装为<code>CustomHttpServletRequest</code>和<code>CustomHttpServletReponse</code>. <code>SessionFilter</code>的核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*SessionFilter.java*/</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">    <span class="comment">//对原生的HttpServletRequest和HttpServletReponse进行封装。</span></div><div class="line">    CustomSessionServletRequest customRequest = <span class="keyword">new</span> CustomSessionServletRequest((HttpServletRequest) request);</div><div class="line">    CustomSessionServletResponse customResponse = <span class="keyword">new</span> CustomSessionServletResponse((HttpServletResponse) response);</div><div class="line">    <span class="comment">//对于一些静态资源可以不经过session框架过滤</span></div><div class="line">    <span class="keyword">if</span> (letitgo(request, response, chain, customRequest)) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//reponseBuffer开关，控制服务器刷新响应流的方式，如果打开的话，会等整个请求处理完成后一次性刷到客户端</span></div><div class="line">    <span class="keyword">if</span> (needResponseBuffered) &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"session framework responseBuffered is on"</span>);</div><div class="line">        &#125;</div><div class="line">        customResponse.setWriterBuffered(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    CustomSession customSession = createCustomSession(customRequest, customResponse);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        chain.doFilter(customRequest, customResponse);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != customSession) &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"session framework start to commit session--"</span> + <span class="string">"customSession.commit"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//将后续业务写入session的信息进行存储，这里就涉及到了将信息写入cookie或者缓存</span></div><div class="line">            customSession.commit();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        logger.error(<span class="string">"session framework occur exception"</span>, ex);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"session framework start to commit buffer--"</span> + <span class="string">"customResponse.commitBuffer"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将响应流刷到客户端</span></div><div class="line">        customResponse.commitBuffer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CustomHttpServletRequest"><a href="#CustomHttpServletRequest" class="headerlink" title="CustomHttpServletRequest"></a>CustomHttpServletRequest</h3><p><code>CustomHttpServletRequest</code>包转了原生的<code>HttpServletRequest</code>，它最核心的就是要覆盖<code>getSession</code>方法，主要的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*CustomHttpServletRequest.java*/</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> CustomSession <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> session;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> CustomSession <span class="title">getSession</span><span class="params">(<span class="keyword">boolean</span> create)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getSession();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样当应用通过getSession返回的则是经过封装以后的代码。</p>
<h3 id="CustomHttpServletReponse"><a href="#CustomHttpServletReponse" class="headerlink" title="CustomHttpServletReponse"></a>CustomHttpServletReponse</h3><p><code>CustomHttpServletReponse</code>封装了原生的<code>HttpServletReponse</code>,此类的实现的时候需要注意在Servlet3.0之前，不支持httponly的cookie，要写入Httponly的cookie需要手动通过<code>addHeader</code>的方法去加入，而Servlet3.0以后，可以直接通过<code>addCookie</code>方法实现，具体的伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCookie</span><span class="params">(CustomCookie cookie)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cookie.isHttpOnly()) &#123;</div><div class="line">            addHeader(SET_COOKIE, buildHttpOnlyCookie(cookie));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.addCookie(cookie);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外我们知道标准的Servlet 输出流有一个缓存区，当应用向缓存区写入数据的时候，如果缓存区已经满了就会刷流到客户端了，这样的话就有可能造成一种情况：部分流已经刷到客户端了，但是后来服务器处理抛异常了，这样用户可能看到的状态可能和服务器不一致，为了解决这个问题，我们可以重写<code>getOutputStream</code>和<code>getWriter</code>方法，这两个方法在返回一个经过我们包装的输出流，这样Session框架就可以保留应用写入的数据到最后请求处理完了以后再由<code>SessionFilter</code>刷新流到客户端。具体的伪代码可以参考如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isWriterBuffered) &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Created new byte buffer"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//这里返回一个ByteArrayOutputStream，方便Session框架控制输出流</span></div><div class="line">        ByteArrayOutputStream bytes = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        stream = <span class="keyword">new</span> BufferedServletOutputStream(bytes);</div><div class="line">        <span class="keyword">return</span> stream;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.getSession().commit();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getOutputStream();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isWriterBuffered) &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"response.getWriter(): Created new character buffer"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//这里返回StringWriter 方便Session框架控制输出流</span></div><div class="line">        StringWriter chars = <span class="keyword">new</span> StringWriter();</div><div class="line">        writer = <span class="keyword">new</span> BufferedServletWriter(chars);</div><div class="line">        <span class="keyword">return</span> writer;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.getSession().commit();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getWriter();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外需要重写的一些方法比如sendError,sendRedirect也需要重写。</p>
<h3 id="CustomHttpSession"><a href="#CustomHttpSession" class="headerlink" title="CustomHttpSession"></a>CustomHttpSession</h3><p><code>CustomHttpSession</code>主要负责管理Session中的状态信息，它是<code>HttpSession</code>的子类，它会根据Session框架的配置，将不同的信息保存到对应的<code>SessionHolder</code>中，对于<code>CustomHttpSession</code>，我们主要需要重写<code>setAttribute</code>和<code>getAttribute</code>方法。它的伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span> </span>&#123;</div><div class="line">    <span class="comment">//1. 根据Session框架的配置文件，找到name的属性对应的session配置项</span></div><div class="line">    <span class="keyword">final</span> SessionConfigItem sessionConfigItem = sessionConfig.getSessionConfigItem(name);</div><div class="line">    <span class="keyword">if</span> (sessionConfigItem == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;<span class="comment">//如果配置项为空，说明此name的属性没有经过session框架配置，不能写入</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2. 根据配置类型获取具体的SessionHolder</span></div><div class="line">    <span class="keyword">final</span> SessionHolder sessionHolder = sessionHolders.get(sessionConfigItem.getHolderType());</div><div class="line">    <span class="comment">//2. 找到对应的SessionHolder将其存储</span></div><div class="line">    sessionHolder.setAttribute(sessionConfigItem, value);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> SessionConfigItem sessionConfigItem = sessionConfig.getSessionConfigItem(name);</div><div class="line">    <span class="keyword">if</span> (sessionConfigItem == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> SessionHolder sessionHolder = sessionHolders.get(sessionConfigItem.getHolderType());</div><div class="line">    <span class="keyword">if</span> (sessionHolder == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sessionHolder.getAttribute(sessionConfigItem);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SessionHolder"><a href="#SessionHolder" class="headerlink" title="SessionHolder"></a>SessionHolder</h3><p>SessionHolder抽象了Session保存的接口，具体实现可以有好多种，比如你可以选择把session信息保存到cookie中，也可以将其保存到缓存中，甚至你可以将其保存到文件系统中。我自己写的session框架，根据前面的讨论，提供了两种存储方式，<code>CookieHolder</code>和<code>CacheHolder</code>分别对应客户端存储和服务器端缓存存储。在<code>CookieHolder</code>中要涉及到对cookie的解析，保存以及加密等操作，而<code>CacheHolder</code>涉及到从分布式缓存中查询到Session的信息以及同步session信息到缓存等一系列操作，具体代码我就不贴了。</p>
]]></content>
    
    <summary type="html">
    
      session框架
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="Session" scheme="http://builderqiu.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载器</title>
    <link href="http://builderqiu.com/2014/08/JavaClassLoaderDetail.html"/>
    <id>http://builderqiu.com/2014/08/JavaClassLoaderDetail.html</id>
    <published>2014-08-12T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:52.937Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7vzn9h.com1.z0.glb.clouddn.com/images/blog/classloader.gif" alt="ClassLoader" title="">
                </div>
                <div class="image-caption">ClassLoader</div>
            </figure>
<h2 id="一、分类："><a href="#一、分类：" class="headerlink" title="一、分类："></a>一、分类：</h2><p>1.BootStrap Class Loader：启动类加载器，负责加载rt.jar文件中所有的Java类，即Java的核心类都是由该ClassLoader加载。在Sun JDK中，这个类加载器是由C++实现的，并且在Java语言中无法获得它的引用。</p>
<p>2.Extension Class Loader：扩展类加载器，负责加载一些扩展功能的jar包。</p>
<p>3.System Class Loader：系统类加载器，负责加载启动参数中指定的Classpath中的jar包及目录，通常我们自己写的Java类也是由该ClassLoader加载。在Sun JDK中，系统类加载器的名字叫AppClassLoader。</p>
<p>4.User Defined Class Loader：用户自定义类加载器，由用户自定义类的加载规则，可以手动控制加载过程中的步骤。<br><a id="more"></a></p>
<h2 id="二、工作原理："><a href="#二、工作原理：" class="headerlink" title="二、工作原理："></a>二、工作原理：</h2><p>类加载分为装载、链接、初始化三步。</p>
<h3 id="1-装载"><a href="#1-装载" class="headerlink" title="1.装载"></a>1.装载</h3><p>通过类的全限定名和ClassLoader加载类，主要是将指定的.class文件加载至JVM。当类被加载以后，在JVM内部就以“类的全限定名+ClassLoader实例ID”来标明类。</p>
<p>在内存中，ClassLoader实例和类的实例都位于堆中，它们的类信息都位于方法区。</p>
<p>装载过程采用了一种被称为“双亲委派模型（Parent Delegation Model）”的方式，当一个ClassLoader要加载类时，它会先请求它的双亲ClassLoader（其实这里只有两个ClassLoader，所以称为父ClassLoader可能更容易理解）加载类，而它的双亲ClassLoader会继续把加载请求提交再上一级的ClassLoader，直到启动类加载器。只有其双亲ClassLoader无法加载指定的类时，它才会自己加载类。</p>
<p>双亲委派模型是JVM的第一道安全防线，它保证了类的安全加载，这里同时依赖了类加载器隔离的原理：不同类加载器加载的类之间是无法直接交互的，即使是同一个类，被不同的ClassLoader加载，它们也无法感知到彼此的存在。这样即使有恶意的类冒充自己在核心包（例如java.lang）下，由于它无法被启动类加载器加载，也造成不了危害。</p>
<p>由此也可见，如果用户自定义了类加载器，那就必须自己保障类加载过程中的安全。</p>
<h3 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h3><p>链接的任务是把二进制的类型信息合并到JVM运行时状态中去。</p>
<p>链接分为以下三步：</p>
<p>a.验证：校验.class文件的正确性，确保该文件是符合规范定义的，并且适合当前JVM使用。</p>
<p>b.准备：为类分配内存，同时初始化类中的静态变量赋值为默认值。</p>
<p>c.解析（可选）：主要是把类的常量池中的符号引用解析为直接引用，这一步可以在用到相应的引用时再解析。</p>
<h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>初始化类中的静态变量，并执行类中的static代码、构造函数。</p>
<p>JVM规范严格定义了何时需要对类进行初始化：</p>
<p>a、通过new关键字、反射、clone、反序列化机制实例化对象时。</p>
<p>b、调用类的静态方法时。</p>
<p>c、使用类的静态字段或对其赋值时。</p>
<p>d、通过反射调用类的方法时。</p>
<p>e、初始化该类的子类时（初始化子类前其父类必须已经被初始化）。</p>
<p>f、JVM启动时被标记为启动类的类（简单理解为具有main方法的类）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://7vzn9h.com1.z0.glb.clouddn.com/images/blog/classloader.gif&quot; alt=&quot;ClassLoader&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;ClassLoader&lt;/div&gt;
            &lt;/figure&gt;
&lt;h2 id=&quot;一、分类：&quot;&gt;&lt;a href=&quot;#一、分类：&quot; class=&quot;headerlink&quot; title=&quot;一、分类：&quot;&gt;&lt;/a&gt;一、分类：&lt;/h2&gt;&lt;p&gt;1.BootStrap Class Loader：启动类加载器，负责加载rt.jar文件中所有的Java类，即Java的核心类都是由该ClassLoader加载。在Sun JDK中，这个类加载器是由C++实现的，并且在Java语言中无法获得它的引用。&lt;/p&gt;
&lt;p&gt;2.Extension Class Loader：扩展类加载器，负责加载一些扩展功能的jar包。&lt;/p&gt;
&lt;p&gt;3.System Class Loader：系统类加载器，负责加载启动参数中指定的Classpath中的jar包及目录，通常我们自己写的Java类也是由该ClassLoader加载。在Sun JDK中，系统类加载器的名字叫AppClassLoader。&lt;/p&gt;
&lt;p&gt;4.User Defined Class Loader：用户自定义类加载器，由用户自定义类的加载规则，可以手动控制加载过程中的步骤。&lt;br&gt;
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="ClassLoader" scheme="http://builderqiu.com/tags/ClassLoader/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之Explain详解</title>
    <link href="http://builderqiu.com/2014/07/MySQLExplainDetailFav.html"/>
    <id>http://builderqiu.com/2014/07/MySQLExplainDetailFav.html</id>
    <published>2014-07-26T16:00:00.000Z</published>
    <updated>2016-12-24T14:31:41.672Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnitblog.com/aliyiyi08/archive/2008/09/09/48878.html" target="_blank" rel="external">原文</a></p>
<h2 id="一-语法"><a href="#一-语法" class="headerlink" title="一.语法"></a>一.语法</h2><p>explain &lt; table_name &gt;</p>
<p>例如: <code>explain select * from t3 where id=3952602;</code><br><a id="more"></a></p>
<h2 id="二-explain输出解释"><a href="#二-explain输出解释" class="headerlink" title="二.explain输出解释"></a>二.explain输出解释</h2><table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h3 id="1-id"><a href="#1-id" class="headerlink" title="1.id"></a>1.id</h3><p>  我的理解是SQL执行的顺利的标识,SQL从大到小的执行.</p>
<p>例如:<br><code>mysql&gt; explain select * from (select * from ( select * from t3 where id=3952602) a) b;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td><derived2></derived2></td>
<td>system</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>DERIVED</td>
<td><derived3></derived3></td>
<td>system</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  3</td>
<td>DERIVED</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td></td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>很显然这条SQL是从里向外的执行,就是从id=3 向上执行.</p>
<h3 id="2-select-type"><a href="#2-select-type" class="headerlink" title="2. select_type"></a>2. select_type</h3><p>就是select类型,可以有以下几种</p>
<p>(1) SIMPLE<br>简单SELECT(不使用UNION或子查询等) 例如:<br><code>mysql&gt; explain select * from t3 where id=3952602;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>const</td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>(2). PRIMARY</p>
<p>我的理解是最外层的select.例如:</p>
<p><code>mysql&gt; explain select * from (select * from t3 where id=3952602) a ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td><derived2></derived2></td>
<td>system</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>DERIVED</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td></td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>(3).UNION</p>
<p>UNION中的第二个或后面的SELECT语句.例如<br><code>mysql&gt; explain select * from t3 where id=3952602 union all select * from t3 ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>const</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>UNION</td>
<td>t3</td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1000</td>
<td></td>
</tr>
<tr>
<td>NULL</td>
<td>UNION RESULT</td>
<td><union1,2></union1,2></td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td></td>
</tr>
</tbody>
</table>
<p>(4).DEPENDENT UNION</p>
<p>UNION中的第二个或后面的SELECT语句，取决于外面的查询</p>
<p><code>mysql&gt; explain select * from t3 where id in (select id from t3 where id=3952602 union all select id from t3)  ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra                    </th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td>t3</td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1000</td>
<td>Using where              </td>
</tr>
<tr>
<td>  2</td>
<td>DEPENDENT SUBQUERY</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>const</td>
<td>1</td>
<td>Using index              </td>
</tr>
<tr>
<td>  3</td>
<td>DEPENDENT UNION</td>
<td>t3</td>
<td>eq_ref</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>func</td>
<td>1</td>
<td>Using where; Using index</td>
</tr>
<tr>
<td>NULL</td>
<td>UNION RESULT</td>
<td><union2,3></union2,3></td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td></td>
</tr>
</tbody>
</table>
<p>(4).UNION RESULT</p>
<p>UNION的结果。</p>
<p><code>mysql&gt; explain select * from t3 where id=3952602 union all select * from t3 ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>const</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>UNION</td>
<td>t3</td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1000</td>
<td></td>
</tr>
<tr>
<td>NULL</td>
<td>UNION RESULT</td>
<td><union1,2></union1,2></td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td></td>
</tr>
</tbody>
</table>
<p>(5).SUBQUERY</p>
<p>子查询中的第一个SELECT.</p>
<p><code>mysql&gt; explain select * from t3 where id = (select id from t3 where id=3952602 )  ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra       </th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>const</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>SUBQUERY</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td></td>
<td>1</td>
<td>Using index</td>
</tr>
</tbody>
</table>
<p>(6).  DEPENDENT SUBQUERY</p>
<p>子查询中的第一个SELECT，取决于外面的查询</p>
<p><code>mysql&gt; explain select id from t3 where id in (select id from t3 where id=3952602 )  ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra                    </th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td>t3</td>
<td>index</td>
<td>NULL</td>
<td>PRIMARY</td>
<td>4</td>
<td>NULL</td>
<td>1000</td>
<td>Using where; Using index</td>
</tr>
<tr>
<td>  2</td>
<td>DEPENDENT SUBQUERY</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>const</td>
<td>1</td>
<td>Using index              </td>
</tr>
</tbody>
</table>
<p>(7).DERIVED</p>
<p>派生表的SELECT(FROM子句的子查询)</p>
<p><code>mysql&gt; explain select * from (select * from t3 where id=3952602) a ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td><derived2></derived2></td>
<td>system</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>DERIVED</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td></td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="3-table"><a href="#3-table" class="headerlink" title="3.table"></a>3.table</h3><p>显示这一行的数据是关于哪张表的.<br>有时不是真实的表名字,看到的是derivedx(x是个数字,我的理解是第几步执行的结果)</p>
<p><code>mysql&gt; explain select * from (select * from ( select * from t3 where id=3952602) a) b;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td><derived2></derived2></td>
<td>system</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>DERIVED</td>
<td><derived3></derived3></td>
<td>system</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  3</td>
<td>DERIVED</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td></td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="4-type"><a href="#4-type" class="headerlink" title="4.type"></a>4.type</h3><p>这列很重要,显示了连接使用了哪种类别,有无使用索引.<br>从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和ALL</p>
<p>(1).system</p>
<p>这是const联接类型的一个特例。表仅有一行满足条件.如下(t3表上的id是 primary key)</p>
<p><code>mysql&gt; explain select * from (select * from t3 where id=3952602) a ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>PRIMARY</td>
<td><derived2></derived2></td>
<td>system</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>  2</td>
<td>DERIVED</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td></td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>(2).const</p>
<p>表最多有一个匹配行，它将在查询开始时被读取。因为仅有一行，在这行的列值可被优化器剩余部分认为是常数。const表很快，因为它们只读取一次！</p>
<p>const用于用常数值比较PRIMARY KEY或UNIQUE索引的所有部分时。在下面的查询中，tbl_name可以用于const表：</p>
<p><code>SELECT * from tbl_name WHERE primary_key=1；</code></p>
<p><code>SELECT * from tbl_name WHERE primary_key_part1=1和 primary_key_part2=2；</code></p>
<p>例如:</p>
<p><code>mysql&gt; explain select * from t3 where id=3952602;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t3</td>
<td>const</td>
<td>PRIMARY,idx_t3_id</td>
<td>PRIMARY</td>
<td>4</td>
<td>const</td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>(3). eq_ref</p>
<p>对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型。它用在一个索引的所有部分被联接使用并且索引是UNIQUE或PRIMARY KEY。</p>
<p>eq_ref可以用于使用 = 操作符比较的带索引的列。比较值可以为常量或一个使用在该表前面所读取的表的列的表达式。</p>
<p>在下面的例子中，MySQL可以使用eq_ref联接来处理ref_tables：</p>
<p><code>SELECT * FROM ref_table,other_table WHERE ref_table.key_column=other_table.column;</code></p>
<p><code>SELECT * FROM ref_table,other_table WHERE ref_table.key_column_part1=other_table.column AND ref_table.key_column_part2=1;</code></p>
<p>例如:</p>
<p><code>mysql&gt; create unique index  idx_t3_id on t3(id) ;</code></p>
<p><code>mysql&gt; explain select * from t3,t4 where t3.id=t4.accountid;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t4</td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1000</td>
<td></td>
</tr>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t3</td>
<td>eq_ref</td>
<td>PRIMARY,idx_t3_id</td>
<td>idx_t3_id</td>
<td>4</td>
<td>dbatest.t4.accountid</td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>(4).ref</p>
<p>对于每个来自于前面的表的行组合，所有有匹配索引值的行将从这张表中读取。如果联接只使用键的最左边的前缀，或如果键不是UNIQUE或PRIMARY KEY（换句话说，如果联接不能基于关键字选择单个行的话），则使用ref。如果使用的键仅仅匹配少量行，该联接类型是不错的。</p>
<p>ref可以用于使用=或&lt;=&gt;操作符的带索引的列。</p>
<p>在下面的例子中，MySQL可以使用ref联接来处理ref_tables：</p>
<p><code>SELECT * FROM ref_table WHERE key_column=expr;</code></p>
<p><code>SELECT * FROM ref_table,other_table WHERE ref_table.key_column=other_table.column;</code></p>
<p><code>SELECT * FROM ref_table,other_table WHERE ref_table.key_column_part1=other_table.column AND ref_table.key_column_part2=1;</code></p>
<p>例如:</p>
<p><code>mysql&gt; drop index idx_t3_id on t3;</code></p>
<p><code>mysql&gt; create index idx_t3_id on t3(id) ;</code></p>
<p><code>mysql&gt; explain select * from t3,t4 where t3.id=t4.accountid;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t4</td>
<td>ALL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>1000</td>
<td></td>
</tr>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t3</td>
<td>ref</td>
<td>PRIMARY,idx_t3_id</td>
<td>idx_t3_id</td>
<td>4</td>
<td>dbatest.t4.accountid</td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>(5).  ref_or_null</p>
<p>该联接类型如同ref，但是添加了MySQL可以专门搜索包含NULL值的行。在解决子查询中经常使用该联接类型的优化。</p>
<p>在下面的例子中，MySQL可以使用ref_or_null联接来处理ref_tables：</p>
<p><code>SELECT * FROM ref_table WHERE key_column=expr OR key_column IS NULL;</code></p>
<p>(6). index_merge</p>
<p>该联接类型表示使用了索引合并优化方法。在这种情况下，key列包含了使用的索引的清单，key_len包含了使用的索引的最长的关键元素。</p>
<p>例如:<br><code>mysql&gt; explain select * from t4 where id=3952602 or accountid=31754306 ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra                                                </th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t4</td>
<td>index_merge</td>
<td>idx_t4_id,idx_t4_accountid</td>
<td>idx_t4_id,idx_t4_accountid</td>
<td>4,4</td>
<td>NULL</td>
<td>2</td>
<td>Using union(idx_t4_id,idx_t4_accountid); Using where</td>
</tr>
</tbody>
</table>
<p>(7). unique_subquery</p>
<p>该类型替换了下面形式的IN子查询的ref：</p>
<p><code>value IN (SELECT primary_key FROM single_table WHERE some_expr)</code><br>unique_subquery是一个索引查找函数，可以完全替换子查询，效率更高。</p>
<p>(8).index_subquery</p>
<p>该联接类型类似于unique_subquery。可以替换IN子查询，但只适合下列形式的子查询中的非唯一索引：</p>
<p><code>value IN (SELECT key_column FROM single_table WHERE some_expr)</code></p>
<p>(9).range</p>
<p>只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。key_len包含所使用索引的最长关键元素。在该类型中ref列为NULL。</p>
<p>当使用=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS NULL、&lt;=&gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range</p>
<p><code>mysql&gt; explain select * from t3 where id=3952602 or id=3952603 ;</code></p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra       </th>
</tr>
</thead>
<tbody>
<tr>
<td>  1</td>
<td>SIMPLE</td>
<td>t3</td>
<td>range</td>
<td>PRIMARY,idx_t3_id</td>
<td>idx_t3_id</td>
<td>4</td>
<td>NULL</td>
<td>2</td>
<td>Using where</td>
</tr>
</tbody>
</table>
<p>1 row in set (0.02 sec)</p>
<p>(10).index</p>
<p>该联接类型与ALL相同，除了只有索引树被扫描。这通常比ALL快，因为索引文件通常比数据文件小。</p>
<p>当查询只使用作为单索引一部分的列时，MySQL可以使用该联接类型。</p>
<p>(11). ALL</p>
<p>对于每个来自于先前的表的行组合，进行完整的表扫描。如果表是第一个没标记const的表，这通常不好，并且通常在它情况下很差。通常可以增加更多的索引而不要使用ALL，使得行能基于前面的表中的常数值或列值被检索出。</p>
<h3 id="5-possible-keys"><a href="#5-possible-keys" class="headerlink" title="5.possible_keys"></a>5.possible_keys</h3><p>possible_keys列指出MySQL能使用哪个索引在该表中找到行。注意，该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。</p>
<p>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p>
<h3 id="6-key"><a href="#6-key" class="headerlink" title="6. key"></a>6. key</h3><p>key列显示MySQL实际决定使用的键（索引）。如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p>
<h3 id="7-key-len"><a href="#7-key-len" class="headerlink" title="7.key_len"></a>7.key_len</h3><p>key_len列显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。<br>使用的索引的长度。在不损失精确性的情况下，长度越短越好</p>
<h3 id="8-ref"><a href="#8-ref" class="headerlink" title="8. ref"></a>8. ref</h3><p>ref列显示使用哪个列或常数与key一起从表中选择行。</p>
<h3 id="9-rows"><a href="#9-rows" class="headerlink" title="9. rows"></a>9. rows</h3><p>rows列显示MySQL认为它执行查询时必须检查的行数。</p>
<h3 id="10-Extra"><a href="#10-Extra" class="headerlink" title="10. Extra"></a>10. Extra</h3><p>该列包含MySQL解决查询的详细信息,下面详细.</p>
<p>(1).Distinct<br>一旦MYSQL找到了与行相联合匹配的行，就不再搜索了</p>
<p>(2).Not exists<br>MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，</p>
<p>就不再搜索了</p>
<p>(3).Range checked for each</p>
<p>Record（index map:#）<br>没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一</p>
<p>(4).Using filesort<br>看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行</p>
<p>(5).Using index<br>列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候</p>
<p>(6).Using temporary<br>看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上</p>
<p>(7).Using where<br>使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题</p>
]]></content>
    
    <summary type="html">
    
      MySQL笔记,Explain
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="SQL" scheme="http://builderqiu.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://builderqiu.com/tags/MySQL/"/>
    
      <category term="Explain" scheme="http://builderqiu.com/tags/Explain/"/>
    
  </entry>
  
  <entry>
    <title>Base64编码Java实现</title>
    <link href="http://builderqiu.com/2014/07/Base64EncoderDecoderBaseOnJava.html"/>
    <id>http://builderqiu.com/2014/07/Base64EncoderDecoderBaseOnJava.html</id>
    <published>2014-07-23T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:25.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是Base64编码"><a href="#一、什么是Base64编码" class="headerlink" title="一、什么是Base64编码"></a>一、什么是Base64编码</h2><p>Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一。Base64 主要不是加密，它主要的用途是把一些二进制数转成普通字符用于网络传输。<br>由于一些二进制字符在传输协议中属于控制字符，不能直接传送需要转换一下。Base64编码就是把二进制字节序列转化为ASCII字符序列。一般增加1/3长度，而且也是不可读的。<br>使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。<br><a id="more"></a></p>
<h2 id="二、Base64原理"><a href="#二、Base64原理" class="headerlink" title="二、Base64原理"></a>二、Base64原理</h2><p><code>[源数据]</code>——&gt;<code>[获得源数据的二进制流]</code>——&gt;<code>[每3个8位二进制转换为4个6位二进制]</code>——&gt;<code>[每6位二进制转换为十进制]</code>——&gt;<code>[对照表转换为Base64数据]</code></p>
<p>关键点：3个8位二进制转换4个6位二进制的方法<br>将输入的二进制数据流以每次读取6个bit的方式读取，不足6位的后补0,将每3个8位二进制转换为4个6位二进制，也就是说每3个8位字节将编码为4个6位字节（3×8 → 4×6）；不满4个字节的以“=”填充。其实这4个六位字节仍然是8位，只不过高两位被设置为0。当一个字节只有6位有效时，它的取值空间为0 到 2的6次方减1 即63，也就是说被转换的Base64编码的每一个编码的取值空间为（0-63）。事实上，0-63之间的ASCII码有许多不可见字符，所以应该再做一个映射，映射表（码表）为：</p>
<table>
<thead>
<tr>
<th>码字</th>
<th>个数</th>
<th>ASCII码</th>
<th>对应的6bit值</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 - 9</td>
<td>10个</td>
<td>48 - 57</td>
<td>52 - 61</td>
</tr>
<tr>
<td>A - Z</td>
<td>26个</td>
<td>65 - 90</td>
<td>0 - 25</td>
</tr>
<tr>
<td>a - z</td>
<td>26个</td>
<td>96 - 122</td>
<td>26 - 51</td>
</tr>
<tr>
<td>+</td>
<td>1个</td>
<td>43</td>
<td>62</td>
</tr>
<tr>
<td>/</td>
<td>1个</td>
<td>47</td>
<td>63</td>
</tr>
</tbody>
</table>
<h2 id="三、Base64应用"><a href="#三、Base64应用" class="headerlink" title="三、Base64应用"></a>三、Base64应用</h2><h3 id="1-mail"><a href="#1-mail" class="headerlink" title="1.mail"></a>1.mail</h3><p>由于rfc821有以下两条限制：</p>
<p>1)邮件的内容必须全部为7-比特的美国ascii码。</p>
<p>2)每一行的长度不能超过1000的字符<br>当邮件中有其他的非ASCII字符或二进制数据时，就需要做转换。这个就叫做Content-Transfer-Encoding，Base64就是其中的一种方法。在firefox你可以设置自己发送邮件的内容传输编码方式。在收到的邮件里，你可以查看邮件原文，看看原文的编码。</p>
<h3 id="2-URL"><a href="#2-URL" class="headerlink" title="2.URL"></a>2.URL</h3><p>有些应用需要把二进制数据放到URL里，URL只能是特定的一些ASCII字符。这时候，也需要用到BASE64编码。当然这也只是对二进制数据本身的编码，编码后的数据里面可能包含+/,真正放到URL里面时候，还需要URL-Encoding,变成%XX模式。</p>
<h3 id="3-HTML中内嵌图片"><a href="#3-HTML中内嵌图片" class="headerlink" title="3.HTML中内嵌图片"></a>3.HTML中内嵌图片</h3><p>就是说这种状况下，图片不是以链接地址的方式嵌到HTML中去的，图片本身已被BASE64成字符串放到HTML页面文本中去了，成为HTML文本的一部分。当HTML页面拉取完成之后，图片数据也就下来了，不再需要再去拉取图片.如下格式：</p>
<p><code>&lt;img src=&#39;data:image/png;base64，base64code&#39;&gt;</code></p>
<p>这种标签图片的显示需要浏览器的支持，先Base64解码，再去显示不同格式的图片。<br>使用<code>data: URI</code>直接在网页中嵌入，<code>data: URI</code>定义于IETF标准的RFC 2397。<br><code>data: URI</code>的基本使用格式如下：</p>
<p><code>data:[&lt;MIME-type&gt;][;base64|charset=some_charset],&lt;data&gt;</code></p>
<p>mime-type是嵌入数据的mime类型，比如png图片就是image/png。如果后面跟base64，说明后面的data是采用base64方式进行编码的。<br>获得图片的base64编码，base64编码工具不少，对于前端制作，下面这个本地图片base64编码获取页面是值得推荐的： <strong>Encode Data URL By PuterJam </strong>。</p>
<h3 id="4-简单加密"><a href="#4-简单加密" class="headerlink" title="4.简单加密"></a>4.简单加密</h3><p>迅雷等下载工具，就有他们自己特有的下载链接，如<code>thunder://</code>其实就是把一个HTTP URL资源地址加上了某些东西后再进行BASE64编码，然后加上<code>thunder://</code>头。<br>垃圾讯息传播者用Base64来避过反垃圾邮件工具，因为那些工具通常都不会翻译Base64的讯息。</p>
<p>###5.百度地图地址转化</p>
<p>百度地图api的地址转化（例如gps坐标-&gt;百度地图坐标）结果，使用了base64加密。</p>
<h2 id="四、Java编码实现"><a href="#四、Java编码实现" class="headerlink" title="四、Java编码实现"></a>四、Java编码实现</h2><pre><code>/**
 *
 * @ClassName: SecurityBase64
 * @Description: 用于编码请求参数
 * @author BuilderQiu
 * @date 2013-9-23 上午10:52:1
 */
public class SecurityBase64 {
    //对照表
    private static String base64hash = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/&quot;;
    //&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/&quot;;

    private SecurityBase64(){}

    private static class TEMP{
        public static final SecurityBase64 instance = new SecurityBase64();
    }

    public static Security getInstance(){
        return TEMP.instance;
    }

    private void checkSecurity(){
        if(&quot;&quot;.equals(base64hash)||base64hash==null||base64hash.length()!=64){
            throw new RuntimeException(Security.class+&quot;was initialize failed!&quot;);
        }
    }

    /**
     *
     * @Title: encode
     * @Description: 编码
     * @param @param src
     * @param @return
     * @return String
     * @throws
     */
    public String encode(String src){

        checkSecurity();

        StringBuilder result = new StringBuilder();
        byte[] bytes = src.getBytes();
        int length = bytes.length;
        int mod = 0;
        byte prev = 0;
        for(int i=0;i&lt;length;i++){
            mod = i%3;
            if(mod==0){
                result.append(base64hash.charAt((bytes[i] &gt;&gt; 2) &amp; 0x3F));
            }else if(mod==1){
                result.append(base64hash.charAt((prev &lt;&lt; 4 | bytes[i] &gt;&gt; 4  &amp;0x0F )&amp; 0x3F));
            }else{
                result.append(base64hash.charAt((bytes[i] &gt;&gt; 6 &amp; 0x03 | prev &lt;&lt; 2) &amp; 0x3F));
                result.append(base64hash.charAt(bytes[i] &amp; 0x3F));
            }
            prev = bytes[i];
        }

        if(mod==0){
            result.append(base64hash.charAt(prev &lt;&lt; 4 &amp; 0x3C));
            result.append(&quot;==&quot;);
        }else if(mod==1){
            result.append(base64hash.charAt(prev &lt;&lt; 2 &amp; 0x3F));
            result.append(&quot;=&quot;);
        }

        return result.toString();
    }

    /**
     *
     * @Title: decode
     * @Description: 解码
     * @param @param src
     * @param @return
     * @return String
     * @throws
     */
    public String decode(String src){

        if(StringUtil.isBlank(src)){
            return &quot;&quot;;
        }
        checkSecurity();

        byte temp = 0;
        String result = &quot;&quot;;
        for(int i=0;i&lt;src.length();i++){
            temp = (byte) base64hash.indexOf(src.charAt(i));
            if(temp==-1){
                result+=&quot;000000&quot;;
            }else{
                String t = Integer.toBinaryString(temp);
                if(t.length()==7){
                    t = t.substring(1);
                }else if(t.length()==8){
                    t = t.substring(2);
                }

                while(t.length()&lt;6){
                    t = &quot;0&quot;+t;
                }
                result+=t;
            }
        }
        while(result.endsWith(&quot;00000000&quot;)){
            result = result.substring(0,result.length()-8);
        }

        byte[] bytes = new byte[result.length()/8];
        for(int i=0;i&lt;bytes.length;i++){
            bytes[i]= Integer.valueOf(result.substring(i*8,(i+1)*8),2).byteValue();
        }
        return new String(bytes);
    }

    public void setBase64hash(String base64hash) {
        Security.base64hash = base64hash;
    }

    /**
     *
     * @Title: randomTable
     * @Description: 生成随机对照表
     * @param @return
     * @return String
     * @throws
     */
    public static String randomTable(){
        String base = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/&quot;;
        List&lt;Character&gt; list = new ArrayList&lt;Character&gt;();
        for(int i=0;i&lt;base.length();i++){
            list.add(base.charAt(i));
        }

        Collections.shuffle(list);
        base = &quot;&quot;;
        for(Character ch:list){
            base += ch;
        }

        return base;
    }

}
</code></pre><p>可用于简单加密，不知道对照表顺序则不能容易的反推出源数据。</p>
]]></content>
    
    <summary type="html">
    
      Base64EncoderDecoderJava实现
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="加密解密" scheme="http://builderqiu.com/tags/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
      <category term="Base64" scheme="http://builderqiu.com/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS中安装jenkins</title>
    <link href="http://builderqiu.com/2014/07/JenkinsInstallOnCentOS.html"/>
    <id>http://builderqiu.com/2014/07/JenkinsInstallOnCentOS.html</id>
    <published>2014-07-21T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:02.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、检查java是否安装"><a href="#一、检查java是否安装" class="headerlink" title="一、检查java是否安装"></a>一、检查java是否安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">java version &quot;1.6.0_22&quot;</div><div class="line">OpenJDK Runtime Environment (IcedTea6 1.10.4) (rhel-1.41.1.10.4.el6-x86_64)</div><div class="line">OpenJDK 64-Bit Server VM (build 20.0-b11, mixed mode)</div></pre></td></tr></table></figure>
<p>如果没有安装：<code>yum install java-1.7.0-openjdk* -y</code><br><a id="more"></a></p>
<h2 id="二、下载jenkins"><a href="#二、下载jenkins" class="headerlink" title="二、下载jenkins"></a>二、下载jenkins</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p jenkins/jenkins_home</div><div class="line">$ mkdir -p jenkins/jenkins_node</div><div class="line">$ cd jenkins</div><div class="line">$ wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war</div><div class="line">$ tar -zvxf jenkins.war</div></pre></td></tr></table></figure>
<h2 id="三、启动jenkins"><a href="#三、启动jenkins" class="headerlink" title="三、启动jenkins"></a>三、启动jenkins</h2><p>实现启动脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ vim start_jenkins.sh</div><div class="line"></div><div class="line">	start_jenkins.sh</div><div class="line">	#!/bin/bash</div><div class="line">	JENKINS_ROOT=/home/AAA/jenkins</div><div class="line">	export JENKINS_HOME=$JENKINS_ROOT/jenkins_home</div><div class="line">	java -jar $JENKINS_ROOT/jenkins.war --httpPort=8000</div><div class="line"></div><div class="line">$ chmod a+x start_jenkins.sh</div><div class="line"></div><div class="line">$ nohup ./start_jenkins.sh &gt; jenkins.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
<h2 id="四、访问jenkins："><a href="#四、访问jenkins：" class="headerlink" title="四、访问jenkins："></a>四、访问jenkins：</h2><p> 在浏览器中输入<a href="http://192.168.0.1:8000" target="_blank" rel="external">http://192.168.0.1:8000</a><br> 进行Project配置等即可。</p>
]]></content>
    
    <summary type="html">
    
      Jenkins，Centos，安装
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="CentOS" scheme="http://builderqiu.com/tags/CentOS/"/>
    
      <category term="Jenkins" scheme="http://builderqiu.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据备份与恢复命令</title>
    <link href="http://builderqiu.com/2014/07/MysqlBackupAndRebackCommand.html"/>
    <id>http://builderqiu.com/2014/07/MysqlBackupAndRebackCommand.html</id>
    <published>2014-07-20T16:00:00.000Z</published>
    <updated>2016-12-24T14:31:29.085Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/Cherie/p/3309456.html" target="_blank" rel="external">原文地址</a><br><a id="more"></a></p>
<h2 id="一、备份常用操作基本命令"><a href="#一、备份常用操作基本命令" class="headerlink" title="一、备份常用操作基本命令"></a>一、备份常用操作基本命令</h2><h3 id="1、备份命令mysqldump格式"><a href="#1、备份命令mysqldump格式" class="headerlink" title="1、备份命令mysqldump格式"></a>1、备份命令mysqldump格式</h3><p>格式：<code>mysqldump -h主机名  -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</code></p>
<h3 id="2、备份MySQL数据库为带删除表的格式"><a href="#2、备份MySQL数据库为带删除表的格式" class="headerlink" title="2、备份MySQL数据库为带删除表的格式"></a>2、备份MySQL数据库为带删除表的格式</h3><p>备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。</p>
<p><code>mysqldump  --add-drop-table -uusername -ppassword -database databasename &gt; backupfile.sql</code></p>
<h3 id="3、直接将MySQL数据库压缩备份"><a href="#3、直接将MySQL数据库压缩备份" class="headerlink" title="3、直接将MySQL数据库压缩备份"></a>3、直接将MySQL数据库压缩备份</h3><p><code>mysqldump -hhostname -uusername -ppassword -database databasename | gzip &gt; backupfile.sql.gz</code></p>
<h3 id="4、备份MySQL数据库某个-些-表"><a href="#4、备份MySQL数据库某个-些-表" class="headerlink" title="4、备份MySQL数据库某个(些)表"></a>4、备份MySQL数据库某个(些)表</h3><p><code>mysqldump -hhostname -uusername -ppassword databasename specific_table1 specific_table2 &gt; backupfile.sql</code></p>
<h3 id="5、同时备份多个MySQL数据库"><a href="#5、同时备份多个MySQL数据库" class="headerlink" title="5、同时备份多个MySQL数据库"></a>5、同时备份多个MySQL数据库</h3><p><code>mysqldump -hhostname -uusername -ppassword –databases databasename1 databasename2 databasename3 &gt; multibackupfile.</code></p>
<h3 id="6、仅备份份数据库结构"><a href="#6、仅备份份数据库结构" class="headerlink" title="6、仅备份份数据库结构"></a>6、仅备份份数据库结构</h3><p><code>mysqldump –no-data –databases databasename1 databasename2 databasename3 &gt; structurebackupfile.sql</code></p>
<h3 id="7、备份服务器上所有数据库"><a href="#7、备份服务器上所有数据库" class="headerlink" title="7、备份服务器上所有数据库"></a>7、备份服务器上所有数据库</h3><p><code>mysqldump –all-databases &gt; allbackupfile.sql</code></p>
<h3 id="8、还原MySQL数据库的命令"><a href="#8、还原MySQL数据库的命令" class="headerlink" title="8、还原MySQL数据库的命令"></a>8、还原MySQL数据库的命令</h3><p><code>mysql -hhostname -uusername -ppassword databasename &lt; backupfile.sql</code></p>
<h3 id="9、还原压缩的MySQL数据库"><a href="#9、还原压缩的MySQL数据库" class="headerlink" title="9、还原压缩的MySQL数据库"></a>9、还原压缩的MySQL数据库</h3><p><code>gunzip &lt; backupfile.sql.gz | mysql -uusername -ppassword databasename</code></p>
<h3 id="10、将数据库转移到新服务器"><a href="#10、将数据库转移到新服务器" class="headerlink" title="10、将数据库转移到新服务器"></a>10、将数据库转移到新服务器</h3><p><code>mysqldump -uusername -ppassword databasename | mysql –host=*.*.*.* -C databasename</code></p>
<h3 id="11、–master-data-和–single-transaction"><a href="#11、–master-data-和–single-transaction" class="headerlink" title="11、–master-data 和–single-transaction"></a>11、–master-data 和–single-transaction</h3><p>在mysqldump中使用<code>--master-data=2</code>，会记录binlog文件和position的信息。<code>--single-transaction</code>会将隔离级别设置成<code>repeatable-commited</code></p>
<h3 id="12、导入数据库"><a href="#12、导入数据库" class="headerlink" title="12、导入数据库"></a>12、导入数据库</h3><p>常用source命令，用use进入到某个数据库，<code>mysql&gt;source d:\test.sql</code>，后面的参数为脚本文件。</p>
<h3 id="13、查看binlog日志"><a href="#13、查看binlog日志" class="headerlink" title="13、查看binlog日志"></a>13、查看binlog日志</h3><p>查看binlog日志可用用命令 mysqlbinlog  binlog日志名称|more</p>
<h3 id="14、general-log"><a href="#14、general-log" class="headerlink" title="14、general_log"></a>14、general_log</h3><p>General_log记录数据库的任何操作，查看general_log 的状态和位置可以用命令<code>show variables like &quot;general_log%&quot;</code>,开启general_log可以用命令<code>set global general_log=on</code></p>
<h2 id="二、增量备份"><a href="#二、增量备份" class="headerlink" title="二、增量备份"></a>二、增量备份</h2><p>小量的数据库可以每天进行完整备份，因为这也用不了多少时间，但当数据库很大时，就不太可能每天进行一次完整备份了，这时候就可以使用增量备份。增量备份的原理就是使用了mysql的binlog志。</p>
<p>1、首先做一次完整备份：</p>
<p><code>mysqldump -h10.6.208.183 -utest2 -p123  -P3310 --single-transaction  --master-data=2  test&gt;test.</code></p>
<p>sql这时候就会得到一个全备文件test.sql</p>
<p>在sql文件中我们会看到：<br><code>-- CHANGE MASTER TO MASTER_LOG_FILE=&#39;bin-log.000002&#39;, MASTER_LOG_POS=107;</code>是指备份后所有的更改将会保存到bin-log.000002二进制文件中。<br>2、在test库的t_student表中增加两条记录，然后执行flush logs命令。这时将会产生一个新的二进制日志文件bin-log.000003，bin-log.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了bin-log.00002中。</p>
<p>3、再在test库中的a表中增加两条记录，然后误删除t_student表和a表。a中增加记录的操作和删除表a和t_student的操作都记录在bin-log.000003中。</p>
<h2 id="三、恢复"><a href="#三、恢复" class="headerlink" title="三、恢复"></a>三、恢复</h2><h3 id="1、首先导入全备数据"><a href="#1、首先导入全备数据" class="headerlink" title="1、首先导入全备数据"></a>1、首先导入全备数据</h3><p><code>mysql -h10.6.208.183 -utest2 -p123  -P3310 &lt; test.sql</code>，也可以直接在mysql命令行下面用source导入</p>
<h3 id="2、恢复bin-log-000002"><a href="#2、恢复bin-log-000002" class="headerlink" title="2、恢复bin-log.000002"></a>2、恢复bin-log.000002</h3><p><code>mysqlbinlog bin-log.000002 |mysql -h10.6.208.183 -utest2 -p123  -P3310</code></p>
<h3 id="3、恢复部分-bin-log-000003"><a href="#3、恢复部分-bin-log-000003" class="headerlink" title="3、恢复部分 bin-log.000003"></a>3、恢复部分 bin-log.000003</h3><p>在general_log中找到误删除的时间点，然后更加对应的时间点到bin-log.000003中找到相应的position点，需要恢复到误删除的前面一个position点。</p>
<p>可以用如下参数来控制binlog的区间</p>
<p><code>--start-position</code> 开始点 <code>--stop-position</code> 结束点</p>
<p><code>--start-date</code> 开始时间  <code>--stop-date</code>  结束时间</p>
<p>找到恢复点后，既可以开始恢复。</p>
<p><code>mysqlbinlog mysql-bin.000003 --stop-position=208 |mysql -h10.6.208.183 -utest2 -p123  -P3310</code></p>
]]></content>
    
    <summary type="html">
    
      Mysql备份恢复命令
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="Mysql" scheme="http://builderqiu.com/tags/Mysql/"/>
    
      <category term="备份" scheme="http://builderqiu.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
      <category term="数据库" scheme="http://builderqiu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置文件常用部分详解</title>
    <link href="http://builderqiu.com/2014/07/NginxConfigDetailInfo.html"/>
    <id>http://builderqiu.com/2014/07/NginxConfigDetailInfo.html</id>
    <published>2014-07-18T16:00:00.000Z</published>
    <updated>2016-12-24T14:31:24.215Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ha97.com/5194.html" target="_blank" rel="external">原文</a><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line">#定义Nginx运行的用户和用户组</div><div class="line">user www www;</div><div class="line"></div><div class="line">#nginx进程数，建议设置为等于CPU总核心数。</div><div class="line">worker_processes 8;</div><div class="line"></div><div class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</div><div class="line">error_log /var/log/nginx/error.log info;</div><div class="line"></div><div class="line">#进程文件</div><div class="line">pid /var/run/nginx.pid;</div><div class="line"></div><div class="line">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</div><div class="line">worker_rlimit_nofile 65535;</div><div class="line"></div><div class="line">#工作模式与连接数上限</div><div class="line">events</div><div class="line">&#123;</div><div class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</div><div class="line">    use epoll;</div><div class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</div><div class="line">    worker_connections 65535;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#设定http服务器</div><div class="line">http</div><div class="line">&#123;</div><div class="line">    include mime.types; #文件扩展名与文件类型映射表</div><div class="line">    default_type application/octet-stream; #默认文件类型</div><div class="line">    #charset utf-8; #默认编码</div><div class="line">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</div><div class="line">    client_header_buffer_size 32k; #上传文件大小限制</div><div class="line">    large_client_header_buffers 4 64k; #设定请求缓</div><div class="line">    client_max_body_size 8m; #设定请求缓</div><div class="line">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</div><div class="line">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</div><div class="line">    tcp_nopush on; #防止网络阻塞</div><div class="line">    tcp_nodelay on; #防止网络阻塞</div><div class="line">    keepalive_timeout 120; #长连接超时时间，单位是秒</div><div class="line"></div><div class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</div><div class="line">    fastcgi_connect_timeout 300;</div><div class="line">    fastcgi_send_timeout 300;</div><div class="line">    fastcgi_read_timeout 300;</div><div class="line">    fastcgi_buffer_size 64k;</div><div class="line">    fastcgi_buffers 4 64k;</div><div class="line">    fastcgi_busy_buffers_size 128k;</div><div class="line">    fastcgi_temp_file_write_size 128k;</div><div class="line"></div><div class="line">    #gzip模块设置</div><div class="line">    gzip on; #开启gzip压缩输出</div><div class="line">    gzip_min_length 1k; #最小压缩文件大小</div><div class="line">    gzip_buffers 4 16k; #压缩缓冲区</div><div class="line">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</div><div class="line">    gzip_comp_level 2; #压缩等级</div><div class="line">    gzip_types text/plain application/x-javascript text/css application/xml;</div><div class="line">    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</div><div class="line">    gzip_vary on;</div><div class="line">    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</div><div class="line"></div><div class="line">    upstream blog.ha97.com &#123;</div><div class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</div><div class="line">        server 192.168.80.121:80 weight=3;</div><div class="line">        server 192.168.80.122:80 weight=2;</div><div class="line">        server 192.168.80.123:80 weight=3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #虚拟主机的配置</div><div class="line">    server</div><div class="line">    &#123;</div><div class="line">        #监听端口</div><div class="line">        listen 80;</div><div class="line">        #域名可以有多个，用空格隔开</div><div class="line">        server_name www.ha97.com ha97.com;</div><div class="line">        index index.html index.htm index.php;</div><div class="line">        root /data/www/ha97;</div><div class="line">        location ~ .*.(php|php5)?$</div><div class="line">        &#123;</div><div class="line">            fastcgi_pass 127.0.0.1:9000;</div><div class="line">            fastcgi_index index.php;</div><div class="line">            include fastcgi.conf;</div><div class="line">        &#125;</div><div class="line">        #图片缓存时间设置</div><div class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</div><div class="line">        &#123;</div><div class="line">            expires 10d;</div><div class="line">        &#125;</div><div class="line">        #JS和CSS缓存时间设置</div><div class="line">        location ~ .*.(js|css)?$</div><div class="line">        &#123;</div><div class="line">            expires 1h;</div><div class="line">        &#125;</div><div class="line">        #日志格式设定</div><div class="line">        log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">        &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</div><div class="line">        #定义本虚拟主机的访问日志</div><div class="line">        access_log /var/log/nginx/ha97access.log access;</div><div class="line"></div><div class="line">        #对 &quot;/&quot; 启用反向代理</div><div class="line">        location / &#123;</div><div class="line">            proxy_pass http://127.0.0.1:88;</div><div class="line">            proxy_redirect off;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">            #以下是一些反向代理的配置，可选。</div><div class="line">            proxy_set_header Host $host;</div><div class="line">            client_max_body_size 10m; #允许客户端请求的最大单文件字节数</div><div class="line">            client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</div><div class="line">            proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</div><div class="line">            proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</div><div class="line">            proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</div><div class="line">            proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</div><div class="line">            proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</div><div class="line">            proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</div><div class="line">            proxy_temp_file_write_size 64k;</div><div class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #设定查看Nginx状态的地址</div><div class="line">        location /NginxStatus &#123;</div><div class="line">            stub_status on;</div><div class="line">            access_log on;</div><div class="line">            auth_basic &quot;NginxStatus&quot;;</div><div class="line">            auth_basic_user_file conf/htpasswd;</div><div class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #本地动静分离反向代理配置</div><div class="line">        #所有jsp的页面均交由tomcat或resin处理</div><div class="line">        location ~ .(jsp|jspx|do)?$ &#123;</div><div class="line">            proxy_set_header Host $host;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">            proxy_pass http://127.0.0.1:8080;</div><div class="line">        &#125;</div><div class="line">        #所有静态文件由nginx直接读取不经过tomcat或resin</div><div class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</div><div class="line">        &#123; expires 15d; &#125;</div><div class="line">        location ~ .*.(js|css)?$</div><div class="line">        &#123; expires 1h; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      Nginx配置详解
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="Nginx" scheme="http://builderqiu.com/tags/Nginx/"/>
    
      <category term="Config" scheme="http://builderqiu.com/tags/Config/"/>
    
  </entry>
  
  <entry>
    <title>基于Nginx的Rtmp流媒体服务器环境搭建</title>
    <link href="http://builderqiu.com/2014/07/RtmpServerBaseOnNginx.html"/>
    <id>http://builderqiu.com/2014/07/RtmpServerBaseOnNginx.html</id>
    <published>2014-07-10T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:27.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、编译安装"><a href="#一、编译安装" class="headerlink" title="一、编译安装"></a>一、编译安装</h2><p><code>wget http://nginx.org/download/nginx-1.4.2.tar.gz</code></p>
<p><code>wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</code></p>
<p>安装Nginx需要安装 pcre、openssl库</p>
<p>CentOS：<code>yum install pcre-devel&amp;openssl-devel -y</code></p>
<p>Ubuntu：<code>sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.4.2.tar.gz</div><div class="line">unzip master.zip</div><div class="line">cd nginx-1.4.2</div><div class="line"></div><div class="line">./configure --add-module=../nginx-rtmp-module-master</div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p>默认会安装在：/usr/local/nginx/目录下<br><a id="more"></a></p>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p><code>vim  /usr/local/nginx/conf/nginx.config</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    ……</div><div class="line">&#125;</div><div class="line">在http节点后面加上rtmp配置：</div><div class="line">rtmp &#123;</div><div class="line">    server &#123;</div><div class="line">        listen 1935;</div><div class="line">        application live1 &#123;</div><div class="line">            live on;</div><div class="line">            record off;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        application vod &#123;</div><div class="line">        	play /var/flv;#视频文件存放路径</div><div class="line"></div><div class="line">        	on_play http://xxxxxx;#播放前调用，返回200则播放继续，3XX则跳转，其他则不播放 ,可以用来做权限校验</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三、播放器配置"><a href="#三、播放器配置" class="headerlink" title="三、播放器配置"></a>三、播放器配置</h2><p>JwPlayer:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></div><div class="line">        jwplayer('xxx').setup(&#123;</div><div class="line">        	streamer: 'rtmp://localhost/vod',#RTMP默认1935端口</div><div class="line">            file: '1.mp4',</div><div class="line">            image: 'view.jpg',</div><div class="line">            width: '100%',</div><div class="line">            aspectratio: '16:9'</div><div class="line">        &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ckplayer:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></div><div class="line">	var flashvars=&#123;</div><div class="line">			f:'rtmp://localhost:1935/vod|1.mp4',//流地址与文件名之间用|分割（需要修改配置文件）</div><div class="line">			c:0,</div><div class="line">			b:0</div><div class="line">		&#125;;</div><div class="line">	var params=&#123;bgcolor:'#FFF',allowFullScreen:true,allowScriptAccess:'always'&#125;;</div><div class="line">	CKobject.embedSWF('/ckplayer/ckplayer.swf','video_flash','ckplayer_a1','609','366',flashvars,params);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="四、启动Nginx"><a href="#四、启动Nginx" class="headerlink" title="四、启动Nginx"></a>四、启动Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/nginx/sbin/</div><div class="line">$ ./nginx -t	#检查配置文件是否OK</div><div class="line">#如果nginx还没启动</div><div class="line">$ ./nginx</div><div class="line">#如果已经启动了</div><div class="line">$ ./nginx -s reload  #重新加载配置文件</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      采用Nginx的Rtmp模块完成Rtmp流媒体服务器搭建
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Nginx" scheme="http://builderqiu.com/tags/Nginx/"/>
    
      <category term="RTMP" scheme="http://builderqiu.com/tags/RTMP/"/>
    
  </entry>
  
  <entry>
    <title>基于Spring的异步系统实现方案</title>
    <link href="http://builderqiu.com/2014/06/AsyncSystemBaseOnSpring.html"/>
    <id>http://builderqiu.com/2014/06/AsyncSystemBaseOnSpring.html</id>
    <published>2014-06-23T16:00:00.000Z</published>
    <updated>2016-12-25T08:21:58.893Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2014-05/AsyncSystem">一般的实现方案</a></p>
<p>##发送异步消息所使用的工具类：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.Destination;</div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;</div><div class="line"><span class="keyword">import</span> javax.jms.Message;</div><div class="line"><span class="keyword">import</span> javax.jms.Session;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQMapMessage;</div><div class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQObjectMessage;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.jms.core.MessageCreator;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(AsyncUtils.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JmsTemplate jmsTemplate;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Destination sendMailDestination;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Destination LoginLogDestination;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Destination normalLogDestination;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Destination pushNotificationDestination;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String type,String operate)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_NORMAL_LOG))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            User user = (User) SecurityUtils.getSubject().getSession().getAttribute(<span class="string">"loginUser"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            OperateLog log = <span class="keyword">new</span> OperateLog(user.getId(), user.getName(), operate,type, user.getLastLoginIp());</div><div class="line">            <span class="keyword">final</span> ActiveMQObjectMessage message = <span class="keyword">new</span> ActiveMQObjectMessage();</div><div class="line">            message.setObject(log);</div><div class="line">            <span class="comment">//AsycWorkFactory.sendMessage(message, AsycWork.NORMAL_LOG);</span></div><div class="line">            jmsTemplate.send(normalLogDestination, <span class="keyword">new</span> MessageCreator() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">                    <span class="keyword">return</span> message;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"日志记录出错!"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String address,String title,String content)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_SEND_MAIL))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">            message.setString(<span class="string">"address"</span>, address);</div><div class="line">            message.setString(<span class="string">"title"</span>, title);</div><div class="line">            message.setString(<span class="string">"content"</span>, content);</div><div class="line"></div><div class="line">            <span class="comment">//AsycWorkFactory.sendMessage(message, AsycWork.EMAIL);</span></div><div class="line">            jmsTemplate.send(sendMailDestination, <span class="keyword">new</span> MessageCreator() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">                    <span class="keyword">return</span> message;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"邮件发送出错！"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loginLog</span><span class="params">(String uid,String ip,Date date)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_LOG_CLIENTUSER_LOGINLOG))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">final</span> ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">            message.setString(<span class="string">"uid"</span>, uid);</div><div class="line">            message.setString(<span class="string">"ip"</span>, ip);</div><div class="line">            message.setString(<span class="string">"date"</span>, DateUtils.formatDateTime(date, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line"></div><div class="line">            <span class="comment">//AsycWorkFactory.sendMessage(message, AsycWork.LOGIN_LOG);</span></div><div class="line">            jmsTemplate.send(LoginLogDestination, <span class="keyword">new</span> MessageCreator() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">                    <span class="keyword">return</span> message;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"邮件发送出错！"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pushNotification</span><span class="params">(String id,String content)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_LOG_CLIENTUSER_LOGINLOG))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">final</span> ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">            message.setString(<span class="string">"id"</span>, id);</div><div class="line">            message.setString(<span class="string">"content"</span>, content);</div><div class="line"></div><div class="line">            jmsTemplate.send(normalLogDestination, <span class="keyword">new</span> MessageCreator() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">                    <span class="keyword">return</span> message;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"消息推送出错！"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJmsTemplate</span><span class="params">(JmsTemplate jmsTemplate)</span> </span>&#123;</div><div class="line">        AsyncUtils.jmsTemplate = jmsTemplate;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"sendMailDestination"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSendMailDestination</span><span class="params">(Destination sendMailDestination)</span> </span>&#123;</div><div class="line">        AsyncUtils.sendMailDestination = sendMailDestination;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"LoginLogDestination"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginLogDestination</span><span class="params">(Destination loginLogDestination)</span> </span>&#123;</div><div class="line">        LoginLogDestination = loginLogDestination;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"normalLogDestination"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNormalLogDestination</span><span class="params">(Destination normalLogDestination)</span> </span>&#123;</div><div class="line">        AsyncUtils.normalLogDestination = normalLogDestination;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"pushNotificationDestination"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPushNotificationDestination</span><span class="params">(</span></span></div><div class="line">            Destination pushNotificationDestination) &#123;</div><div class="line">        AsyncUtils.pushNotificationDestination = pushNotificationDestination;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##监听异步消息的监听器类（可以给每个类型的消息设定不同的监听器）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(EmailListener.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        ActiveMQMapMessage msg = (ActiveMQMapMessage) message;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String address = msg.getString(<span class="string">"address"</span>);</div><div class="line">            String title = msg.getString(<span class="string">"title"</span>);</div><div class="line">            String content = msg.getString(<span class="string">"content"</span>);</div><div class="line"></div><div class="line">            Constants.sendMail(address, title, content);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"异步邮件发送异常"</span>, e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##使用方式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异步发送邮件</span></div><div class="line">AsyncUtils.sendMail(<span class="string">"邮件地址"</span>,<span class="string">"主题"</span>,<span class="string">"内容"</span>);</div><div class="line"><span class="comment">//即可</span></div></pre></td></tr></table></figure>
<p>##Spring配置文件:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span>  </div><div class="line">    <span class="attr">xmlns:core</span>=<span class="string">"http://activemq.apache.org/schema/core"</span>  </div><div class="line">    <span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span>  </div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </div><div class="line">    <span class="attr">xmlns:lang</span>=<span class="string">"http://www.springframework.org/schema/lang"</span>  </div><div class="line">    <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span>  </div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </span></div><div class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  </div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd  </div><div class="line">        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.9.0.xsd  </div><div class="line">        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd  </div><div class="line">        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd  </div><div class="line">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd"&gt;  </div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- ActiveMQ 异步任务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- 存放异步操作相关需要Spring管理的类的包 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.core.async"</span> /&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.7.21:61616"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 带连接池的JMS链接工厂 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pooledConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnections"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span>  </span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;  </div><div class="line">        <span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"pooledConnectionFactory"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sendMailDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"SendEmail"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"LoginLogDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"LoginLog"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"normalLogDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"NormalLog"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pushNotificationDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Notification"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 消息监听容器 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsEmailContainer"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"sendMailDestination"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"emailListener"</span> /&gt;</span>  <span class="comment">&lt;!-- 设置监听对象 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsLoginLogContainer"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"LoginLogDestination"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"loginLogListener"</span> /&gt;</span>  <span class="comment">&lt;!-- 设置监听对象 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsNormalLogContainer"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"normalLogDestination"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"normalLogListener"</span> /&gt;</span>  <span class="comment">&lt;!-- 设置监听对象 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsNotificationContainer"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"pushNotificationDestination"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"pushNotificationListener"</span> /&gt;</span>  <span class="comment">&lt;!-- 设置监听对象 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      采用Spring配置文件+注解的方式实现基于ActiveMQ的异步系统方案备忘
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Spring" scheme="http://builderqiu.com/tags/Spring/"/>
    
      <category term="Async" scheme="http://builderqiu.com/tags/Async/"/>
    
      <category term="ActiveMQ" scheme="http://builderqiu.com/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>重启Tomcat应用Shell脚本</title>
    <link href="http://builderqiu.com/2014/06/RestartTomcatShell.html"/>
    <id>http://builderqiu.com/2014/06/RestartTomcatShell.html</id>
    <published>2014-06-23T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:25.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚本："><a href="#脚本：" class="headerlink" title="脚本："></a>脚本：</h2><p>杀死并重启tomcat进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line"># DEFINE</div><div class="line"></div><div class="line"># 获取tomcat进程ID</div><div class="line">TomcatID=$(ps -ef |grep red5 |grep -w &apos;red5Server&apos;|grep -v &apos;grep&apos;|awk &apos;NR==1 &#123;print $2&#125;&apos;)</div><div class="line">#NR==1 每次只取一个pid</div><div class="line"></div><div class="line"># tomcat启动程序</div><div class="line">StartTomcat=/opt/red5Server/bin/startup.sh</div><div class="line">TomcatCache=/opt/red5Server/work</div><div class="line"></div><div class="line"># 日志输出</div><div class="line">TomcatMonitorLog=/tmp/TomcatMonitor.log</div><div class="line"></div><div class="line">Monitor()</div><div class="line">&#123;</div><div class="line">  echo &quot;[info]开始监控tomcat...[$(date +&apos;%F %H:%M:%S&apos;)]&quot;</div><div class="line">  while [ $TomcatID ];do</div><div class="line">    echo &quot;[info]当前tomcat进程ID为:$TomcatID,Kill掉...&quot;</div><div class="line">    kill -9 $TomcatID</div><div class="line">    TomcatID=$(ps -ef |grep red5 |grep -w &apos;red5Server&apos;|grep -v &apos;grep&apos;|awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">  done;</div><div class="line">  echo &quot;[info]当前没有tomcat进程&quot;</div><div class="line">  sleep 5</div><div class="line">  rm -rf $TomcatCache # 清理tomcat缓存</div><div class="line">  sleep 5</div><div class="line">  $StartTomcat</div><div class="line">  echo &quot;------------------------------&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Monitor&gt;&gt;$TomcatMonitorLog</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="异常："><a href="#异常：" class="headerlink" title="异常："></a>异常：</h2><p>在Linux中执行.sh脚本，异常<code>/bin/sh^M: bad interpreter: No such file or directory。</code></p>
<p>分析：这是不同系统编码格式引起的：在windows系统中编辑的.sh文件可能有不可见字符，所以在Linux系统下执行会报以上异常信息。</p>
<p>解决：</p>
<p>1）在windows下转换：</p>
<p>利用一些编辑器如UltraEdit或EditPlus等工具先将脚本编码转换，再放到Linux中执行。转换方式如下（UltraEdit）：File–&gt;Conversions–&gt;DOS-&gt;UNIX即可。</p>
<p>2）也可在Linux中转换：</p>
<p>首先要确保文件有可执行权限</p>
<p><code>#sh&gt;chmod a+x filename</code></p>
<p>然后修改文件格式</p>
<p><code>#sh&gt;vi filename</code></p>
<p>利用如下命令查看文件格式</p>
<p><code>:set ff</code> 或 <code>:set fileformat</code></p>
<p>可以看到如下信息</p>
<p><code>fileformat=dos</code> 或 <code>fileformat=unix</code></p>
<p>利用如下命令修改文件格式</p>
<p><code>:set ff=unix</code> 或 <code>:set fileformat=unix</code></p>
<p><code>:wq</code> (存盘退出)</p>
<p>最后再执行文件</p>
<p><code>#sh&gt;./filename</code></p>
<blockquote>
<p>PS:再配合crontab可以完成定时任务调度</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      配合crontab完成tomcat服务器定时重启脚本
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Tomcat" scheme="http://builderqiu.com/tags/Tomcat/"/>
    
      <category term="Shell" scheme="http://builderqiu.com/tags/Shell/"/>
    
      <category term="Crontab" scheme="http://builderqiu.com/tags/Crontab/"/>
    
  </entry>
  
  <entry>
    <title>Mysql用户相关操作</title>
    <link href="http://builderqiu.com/2014/06/MysqlUserOperate.html"/>
    <id>http://builderqiu.com/2014/06/MysqlUserOperate.html</id>
    <published>2014-06-22T16:00:00.000Z</published>
    <updated>2016-12-25T08:24:24.986Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 默认有个<code>root</code>用户，但是这个用户权限太大，一般只在管理数据库时候才用。如果在项目中要连接 MySQL 数据库，则建议新建一个权限较小的用户来连接。</p>
<p>在 MySQL 命令行模式下输入如下命令可以为 MySQL 创建一个新用户：</p>
<p><code>CREATE USER username IDENTIFIED BY &#39;password&#39;;</code></p>
<a id="more"></a>
<p>新用户创建完成，但是此刻如果以此用户登陆的话，会报错，因为我们还没有为这个用户分配相应权限，分配权限的命令如下：</p>
<p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;</code></p>
<p>授予username用户在所有数据库上的所有权限。</p>
<p><code>GRANT REPLICATION SLAVE ON *.* TO &#39;backup&#39;@&#39;address&#39; IDENTIFIED BY &#39;backup_xxx&#39;;</code><br>创建主从同步数据的账号</p>
<p>如果此时发现刚刚给的权限太大了，如果我们只是想授予它在某个数据库上的权限，那么需要切换到root 用户撤销刚才的权限，重新授权：</p>
<p><code>REVOKE ALL PRIVILEGES ON *.* FROM &#39;username&#39;@&#39;localhost&#39;;</code></p>
<p><code>GRANT ALL PRIVILEGES ON dbnames.* TO &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;</code></p>
<p>甚至还可以指定该用户只能执行 select 和 update 命令：</p>
<p><code>GRANT SELECT, UPDATE ON dbnames.* TO &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;</code></p>
<p>这样一来，再次以username登陆 MySQL，只有dbnames数据库是对其可见的，并且如果你只授权它select权限，那么它就不能执行除select之外的语句。</p>
<p>另外每当调整权限后，通常需要执行以下语句刷新权限：</p>
<p><code>FLUSH PRIVILEGES;</code></p>
<p>删除刚才创建的用户：</p>
<p><code>DROP USER username@localhost;</code></p>
<p>仔细上面几个命令，可以发现不管是授权，还是撤销授权，都要指定响应的host（即 @ 符号后面的内容），因为以上及格命令实际上都是在操作mysql数据库中的user表，可以用如下命令查看相应用户及对应的host:</p>
<p><code>SELECT User, Host FROM user;</code></p>
<p>当然，这个表中还包含很多其它例如用户密码、权限设置等很多内容，操作时候尤其需要小心。</p>
<h3 id="忘记Root密码："><a href="#忘记Root密码：" class="headerlink" title="忘记Root密码："></a>忘记Root密码：</h3><p>开启防火墙，确保在其他人不会连接到数据库的时候：</p>
<p>关闭Mysql，并修改配置文件(my.cnf)：<br>在<code>[mysqld]</code>下面添加：<code>skip-grant-tables</code>。</p>
<p>重启mysql，连接之后即可修改root密码</p>
]]></content>
    
    <summary type="html">
    
      Mysql数据库用户及权限相关操作
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Mysql" scheme="http://builderqiu.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Groovy基础语法</title>
    <link href="http://builderqiu.com/2014/06/GroovyBase.html"/>
    <id>http://builderqiu.com/2014/06/GroovyBase.html</id>
    <published>2014-06-03T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:41.464Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Groovy-是没有类型的Java，所以定义变量的时候可以不指定类型-Groovy会根据对象的值来判断其类型"><a href="#1-Groovy-是没有类型的Java，所以定义变量的时候可以不指定类型-Groovy会根据对象的值来判断其类型" class="headerlink" title="1.Groovy 是没有类型的Java，所以定义变量的时候可以不指定类型,Groovy会根据对象的值来判断其类型"></a>1.Groovy 是没有类型的Java，所以定义变量的时候可以不指定类型,Groovy会根据对象的值来判断其类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def str = <span class="string">"Hello world"</span>  </div><div class="line">println str.class</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-通过Groovy进行循环"><a href="#2-通过Groovy进行循环" class="headerlink" title="2.通过Groovy进行循环"></a>2.通过Groovy进行循环</h3><p>在Groovy中，for循环变得更简洁，更易阅读。首先，范围的定义方式更加简洁：0..4表明包含整数0,1,2,3,4; 0..&lt;4 表示0,1,2,3; a..e 表示 a,b,c,d,e</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(i in <span class="number">1</span>..<span class="number">5</span>)&#123;  </div><div class="line">  println i  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Groovy也支持默认参数值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">def <span class="title">repeat</span><span class="params">(val, repeat=<span class="number">5</span>)</span></span>&#123;  </div><div class="line"> <span class="keyword">for</span>(i in <span class="number">0</span>..&lt;repeat)&#123;  </div><div class="line">  println val  </div><div class="line"> &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">repeat(<span class="string">"Hello world"</span>,<span class="number">2</span>)  </div><div class="line">repeat(<span class="string">"foo"</span>,<span class="number">4</span>)</div></pre></td></tr></table></figure>
<h3 id="3-操作集合"><a href="#3-操作集合" class="headerlink" title="3. 操作集合"></a>3. 操作集合</h3><p>在Groovy中，我们可以用范围来定义集合或者数组。<br>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def range = <span class="number">0</span>..<span class="number">4</span>   </div><div class="line">println range.class  </div><div class="line">def coll = [<span class="string">"Groovy"</span>,<span class="string">"Java"</span>,<span class="string">"Ruby"</span>]  </div><div class="line">println coll.class</div></pre></td></tr></table></figure>
<p>为某个集合添加元素时，我们可以使用以下几种方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">coll.add(<span class="string">"Python"</span>)  </div><div class="line">coll &lt;&lt; <span class="string">"Smalltalk"</span>  </div><div class="line">coll[<span class="number">5</span>] = <span class="string">"Perl"</span></div></pre></td></tr></table></figure>
<p>检索方式也更加灵活</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println coll[<span class="number">1</span>]</div></pre></td></tr></table></figure>
<p>Groovy还允许在集合中增加或去掉集合</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </div><div class="line">def numbers2 = numbers +<span class="number">5</span> <span class="comment">//=[1,2,3,4,5]  </span></div><div class="line">println numbers2  </div><div class="line">def numbers3 = numbers - [<span class="number">2</span>,<span class="number">3</span>]<span class="comment">//=[1,4]  </span></div><div class="line">println numbers3</div></pre></td></tr></table></figure>
<p>一些特殊调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </div><div class="line">println numbers.join(<span class="string">";"</span>) <span class="comment">//= 1;2;3;4 ,将集合的元素拼接成了字符串  </span></div><div class="line">println [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>].count(<span class="number">3</span>) <span class="comment">//=2 统计元素出现的次数  </span></div><div class="line">[<span class="string">"Java"</span>,<span class="string">"Groovy"</span>]*.toUpperCase() <span class="comment">// 全部转换成大写</span></div></pre></td></tr></table></figure>
<p>请注意 *. 标记。对于以上列表中的每个值，都会调用 toUpperCase()，生成的集合中每个 String 实例都是大写的.</p>
<h3 id="4-映射"><a href="#4-映射" class="headerlink" title="4.映射"></a>4.映射</h3><p>定义Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def hash = [name:<span class="string">"Andy"</span>, <span class="string">"VPN-#"</span>:<span class="number">45</span>]  </div><div class="line">println hash.getClass() <span class="comment">//=java.util.LinkedHashMap</span></div></pre></td></tr></table></figure>
<p>name 看起来像一个变量，但是在幕后，Groovy 会将它变成 String。<br>操作键值对</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hash.put(<span class="string">"id"</span>,<span class="number">23</span>)  </div><div class="line">hash.get(<span class="string">"name"</span>)  </div><div class="line">hash.dob = <span class="string">"01/29/76"</span>  </div><div class="line">println hash[<span class="string">"name"</span>] <span class="comment">//="Andy"</span></div></pre></td></tr></table></figure>
<p>请注意，在使用 [] 语法从映射获取项时，必须将项作为 String 引用。</p>
<h3 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5.闭包"></a>5.闭包</h3><p>使用闭包对集合进行迭代</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def acoll = [<span class="string">"Groovy"</span>, <span class="string">"Java"</span>, <span class="string">"Ruby"</span>]  </div><div class="line"></div><div class="line">acoll.each&#123;  </div><div class="line"> println it  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意，each 直接在 acoll 实例内调用，而 acoll 实例的类型是 ArrayList。在 each 调用之后，引入了一种新的语法 — {，然后是一些代码，然后是 }。由 {} 包围起来的代码块就是闭包。</p>
<p>闭包中的 it 变量是一个关键字，指向被调用的外部集合的每个值 — 它是默认值，可以用传递给闭包的参数覆盖它。下面的代码执行同样的操作，但使用自己的项变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def acoll = [<span class="string">"Groovy"</span>, <span class="string">"Java"</span>, <span class="string">"Ruby"</span>]  </div><div class="line"></div><div class="line">acoll.each&#123; value -&gt;  </div><div class="line"> println value  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用闭包迭代Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def hash = [name:<span class="string">"Andy"</span>, <span class="string">"VPN-#"</span>:<span class="number">45</span>]  </div><div class="line">hash.each&#123; key, value -&gt;  </div><div class="line"> println <span class="string">"$&#123;key&#125; : $&#123;value&#125;"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>闭包的其他用途：因为闭包是一个代码块，所以能够作为参数进行传递（Groovy 中的函数或方法不能这样做）。闭包在调用的时候才会执行这一事实（不是在定义的时候）使得它们在某些场合上特别有用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def excite = &#123; word -&gt;  </div><div class="line"> <span class="keyword">return</span> <span class="string">"$&#123;word&#125;!!"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以通过两种方法调用闭包：直接调用或者通过 call() 方法调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> <span class="string">"Groovy!!"</span> == excite(<span class="string">"Groovy"</span>)  </div><div class="line"><span class="keyword">assert</span> <span class="string">"Java!!"</span> == excite.call(<span class="string">"Java"</span>)</div></pre></td></tr></table></figure>
<h3 id="6-Groovy-中的类"><a href="#6-Groovy-中的类" class="headerlink" title="6.Groovy 中的类"></a>6.Groovy 中的类</h3><p>Groovy类就是Java类，我们先定义一个bean.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;  </div><div class="line"> <span class="function">def name  </span></div><div class="line"> def artist  </div><div class="line"> def genre  </div><div class="line"> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(args)</span> &#123;  </div><div class="line">  def sng = <span class="keyword">new</span> Song(name:<span class="string">"Le Freak"</span>,   </div><div class="line">    artist:<span class="string">"Chic"</span>, genre:<span class="string">"Disco"</span>)  </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Groovy 自动提供一个构造函数，构造函数接受一个名称-值对的映射，这些名称-值对与类的属性相对应。这是 Groovy 的一项开箱即用的功能,除此之外，Groovy还生成了标准的 setter 和 getter 方法,所以可以像下面这样直接操纵类的属性，这些操作实际上都是通过setter,getter方法进行的，默认情况下，类的属性是私有的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def sng3 = <span class="keyword">new</span> Song()  </div><div class="line">sng3.name = <span class="string">"Funkytown"</span>  </div><div class="line">sng3.artist = <span class="string">"Lipps Inc."</span>  </div><div class="line">sng3.setGenre(<span class="string">"Disco"</span>)  </div><div class="line"></div><div class="line"><span class="keyword">assert</span> sng3.getArtist() == <span class="string">"Lipps Inc."</span></div></pre></td></tr></table></figure>
<p>方法覆盖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span>&#123;  </div><div class="line"> <span class="string">"$&#123;name&#125;, $&#123;artist&#125;, $&#123;genre&#125;"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Groovy 中可以省略 return 语句。Groovy 默认返回方法的最后一行。所以在这个示例中，返回包含类属性的 String。</p>
<p>空指针安全性<br>Groovy 通过 ? 操作符提供了一个安全网 — 在方法调用前面添加一个 ? 就相当于在调用前面放了一个条件，可以防止在 null 对象上调用方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def d=<span class="keyword">null</span>  </div><div class="line">println d?.toUpperCase()  </div><div class="line">d=<span class="string">"Hello world"</span>  </div><div class="line">println d?.toUpperCase()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Groovy-是没有类型的Java，所以定义变量的时候可以不指定类型-Groovy会根据对象的值来判断其类型&quot;&gt;&lt;a href=&quot;#1-Groovy-是没有类型的Java，所以定义变量的时候可以不指定类型-Groovy会根据对象的值来判断其类型&quot; class=&quot;headerlink&quot; title=&quot;1.Groovy 是没有类型的Java，所以定义变量的时候可以不指定类型,Groovy会根据对象的值来判断其类型&quot;&gt;&lt;/a&gt;1.Groovy 是没有类型的Java，所以定义变量的时候可以不指定类型,Groovy会根据对象的值来判断其类型&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;def str = &lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;println str.class&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Java" scheme="http://builderqiu.com/tags/Java/"/>
    
      <category term="Groovy" scheme="http://builderqiu.com/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>获取泛型类型工具类</title>
    <link href="http://builderqiu.com/2014/06/JavaGenricUtils.html"/>
    <id>http://builderqiu.com/2014/06/JavaGenricUtils.html</id>
    <published>2014-06-02T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:57.209Z</updated>
    
    <content type="html"><![CDATA[<p>Java泛型在编译阶段会进行泛型擦除，所以能够在运行期获得的泛型是在编译阶段已经确定(继承的泛型类)了的。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenricUtils</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获得泛型类型</div><div class="line">	 * <span class="doctag">@param</span> clz</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Class&lt;T&gt; <span class="title">getGenricClassType</span><span class="params">(Class clz)</span></span>&#123;</div><div class="line"></div><div class="line">		Type type = clz.getGenericSuperclass();</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(type <span class="keyword">instanceof</span> ParameterizedType)&#123;</div><div class="line">			ParameterizedType pt = (ParameterizedType) type;</div><div class="line">			Type[] types = pt.getActualTypeArguments();</div><div class="line">			<span class="keyword">if</span>(types.length &gt; <span class="number">0</span> &amp;&amp; types[<span class="number">0</span>] <span class="keyword">instanceof</span> Class)&#123;</div><div class="line">				<span class="keyword">return</span> (Class) types[<span class="number">0</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> (Class) Object.class;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestA</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Class&lt;T&gt; clz = GenricUtils.getGenricClassType(TestA.class);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">get</span><span class="params">(String id)</span></span>&#123;</div><div class="line">		session.get(clz,id);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestB</span> <span class="keyword">extends</span> <span class="title">TestA</span>&lt;<span class="title">String</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在执行:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.out.println(getGenricClassType(TestA.class));</div><div class="line">System.out.println(getGenricClassType(TestB.class));</div></pre></td></tr></table></figure>
<p>输出的结果分别为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></div><div class="line"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      泛型，工具类
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="泛型" scheme="http://builderqiu.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器软件安装备忘</title>
    <link href="http://builderqiu.com/2014/05/LinuxSoftwareInstallBackup.html"/>
    <id>http://builderqiu.com/2014/05/LinuxSoftwareInstallBackup.html</id>
    <published>2014-05-28T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:08.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Centos安装Mysql"><a href="#1-Centos安装Mysql" class="headerlink" title="1.Centos安装Mysql"></a>1.Centos安装Mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">--安装</div><div class="line">yum install mysql-server   卸载 yum -e mysql-server</div><div class="line">--设置为开机启动</div><div class="line">chkconfig mysqld on</div><div class="line">--启动mysql</div><div class="line">service mysqld start</div><div class="line">--设置root密码</div><div class="line">mysqladmin -u root password &apos;xxx&apos;</div><div class="line"></div><div class="line">&lt;!-- more --&gt;</div><div class="line"></div><div class="line">#双机热备</div><div class="line">GRANT REPLICATION SLAVE ON *.* TO &apos;backup&apos;@&apos;192.168.1.33&apos; IDENTIFIED BY &apos;backup_xxx&apos;;</div><div class="line">#一般账号</div><div class="line">--GRANT ALL PRIVILEGES ON *.* TO &apos;username&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos;;</div><div class="line"></div><div class="line">flush privileges;</div><div class="line"></div><div class="line"></div><div class="line">乱码：</div><div class="line">[mysqld]</div><div class="line">#add</div><div class="line"></div><div class="line">default-character-set = utf8</div><div class="line">character-set-server = utf8</div><div class="line">collation-server = utf8_general_ci</div><div class="line"></div><div class="line">init_connect = &apos;SET collation_connection = utf_general_ci&apos;</div><div class="line">init_connect = &apos;SET NAMES utf8&apos;</div><div class="line">[mysqld_safe]</div></pre></td></tr></table></figure>
<h2 id="2-安装Redis"><a href="#2-安装Redis" class="headerlink" title="2.安装Redis"></a>2.安装Redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-2.8.7.tar.gz  or  http://download.redis.io/releases/redis-2.6.17.tar.gz</div><div class="line">tar -zvxf xxx</div><div class="line">configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h2 id="3-启动memcached"><a href="#3-启动memcached" class="headerlink" title="3.启动memcached"></a>3.启动memcached</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">memcached -d -m 100 -u root -p 11211 -P /tmp/memcached.pid</div></pre></td></tr></table></figure>
<h2 id="4-防火墙："><a href="#4-防火墙：" class="headerlink" title="4.防火墙："></a>4.防火墙：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Iptables:</div><div class="line">启动iptables</div><div class="line">service iptables start</div><div class="line">iptables --list //*查看iptables规则集*//</div><div class="line">下面是没有定义规划时iptables的样子:</div><div class="line">Chain INPUT (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line">Chain FORWARD (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line"></div><div class="line">如何开启/关闭指定端口</div><div class="line">例如:</div><div class="line">开启81端口：</div><div class="line">iptables -I INPUT -i eth0 -p tcp --dport 81 -j ACCEPT</div><div class="line">iptables  -I OUTPUT -o eth0 -p tcp --sport 81 -j ACCEPT</div><div class="line">关闭81端口：</div><div class="line">iptables -I INPUT -i eth0 -p tcp --dport 81 -j DROP</div><div class="line">iptables -I OUTPUT -o eth0 -p tcp --sport 81 -j DROP</div><div class="line">然后保存</div><div class="line"></div><div class="line">/etc/rc.d/init.d/iptables save</div><div class="line"></div><div class="line">你可以使用lsof命令来查看某一端口是否开放.查看端口可以这样来使用.</div><div class="line">我就以81端口为例：</div><div class="line">lsof -i:81</div><div class="line">如果有显示说明已经开放了.如果没有显示说明没有开放</div></pre></td></tr></table></figure>
<h2 id="5-环境变量"><a href="#5-环境变量" class="headerlink" title="5.环境变量"></a>5.环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Tomcat JVM配置--catalina.bat/catalina.sh</div><div class="line">windows</div><div class="line">set JAVA_OPTS = -Xmx512m -Xms512m -XX:MaxPermSize=256m</div><div class="line">linux</div><div class="line">JAVA_OPTS =&quot;-server -Xmx400m -Xms400m -Xmn128m -XX:MaxPermSize=128m -XX:PermSize=128m&quot;</div></pre></td></tr></table></figure>
<h2 id="6-项目直接访问"><a href="#6-项目直接访问" class="headerlink" title="6.项目直接访问"></a>6.项目直接访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">【Tomcat直接访问项目--去掉访问路径上的项目名称】</div><div class="line">修改Tomcat_Home/conf/server.xml</div><div class="line"></div><div class="line">&lt;Host&gt; 下添加  &lt;Context path=&quot;&quot; docBase=&quot;项目路径&quot; reloadable=&quot;true&quot; /&gt;</div><div class="line"></div><div class="line">path为访问路径，与request.getContextPath()返回值一样。</div></pre></td></tr></table></figure>
<h2 id="7-Nginx配置："><a href="#7-Nginx配置：" class="headerlink" title="7.Nginx配置："></a>7.Nginx配置：</h2><p>安装 pcre-devel openssl-devel   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line"></div><div class="line"> #...</div><div class="line"></div><div class="line"> gzip on;</div><div class="line"> gzip_min_length 1k;</div><div class="line"> gzip_buffers 16 64k;</div><div class="line"> gzip_http_version 1.1;</div><div class="line"> gzip_comp_level 4;</div><div class="line"> gzip_types text/plain text/css application/xml image/png; #...</div><div class="line"> gzip_vary on;</div><div class="line"></div><div class="line"> sendfile	on;</div><div class="line"></div><div class="line"> client_max_body_size 1024m;#附件上传</div><div class="line"></div><div class="line">	upstream e_learning&#123;</div><div class="line">		server 192.168.1.30:8080;</div><div class="line">		server 192.168.1.31:8080;</div><div class="line">		ip_hash;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	server&#123;</div><div class="line">		listen		80;</div><div class="line">		server_name	192.168.1.34;</div><div class="line">		index		index.jsp;</div><div class="line"></div><div class="line">		location / &#123;</div><div class="line">			index	index.jsp;</div><div class="line">			proxy_pass	http://e_learning;</div><div class="line">			proxy_set_header	Host	$host;</div><div class="line">			proxy_set_header	X-Real_IP	$remote_addr;</div><div class="line">			proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		location ^~ /upload/ &#123;</div><div class="line">			expires	10d;</div><div class="line">			root 	/var/e_learning;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		location ^~ /vod &#123;</div><div class="line">			proxy_pass http://192.168.1.36:1935/vod/;</div><div class="line">			proxy_set_header	Host	$host;</div><div class="line">			proxy_set_header	X-Real_IP	$remote_addr;</div><div class="line">			proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		location ~*\.(gif|jpg|png|js|css)$ &#123;</div><div class="line">			expires 10d;</div><div class="line">			proxy_pass	http://e_learning;</div><div class="line">			proxy_set_header	Host	$host;</div><div class="line">			proxy_set_header	X-Real_IP	$remote_addr;</div><div class="line">			proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Centos安装Mysql&quot;&gt;&lt;a href=&quot;#1-Centos安装Mysql&quot; class=&quot;headerlink&quot; title=&quot;1.Centos安装Mysql&quot;&gt;&lt;/a&gt;1.Centos安装Mysql&lt;/h2&gt;&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Redis的在线用户列表解决方案</title>
    <link href="http://builderqiu.com/2014/05/OnlineListByRedis.html"/>
    <id>http://builderqiu.com/2014/05/OnlineListByRedis.html</id>
    <published>2014-05-25T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:20.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>由于项目需求，需要在集群环境下实现在线用户列表的功能，并依靠在线列表实现用户单一登陆（同一账户只能一处登陆）功能：</p>
<p>在单机环境下，在线列表的实现方案可以采用SessionListener来完成，当有Session创建和销毁的时候做相应的操作即可完成功能及将相应的Session的引用存放于内存中，由于持有了所有的Session的引用，故可以方便的实现用户单一登陆的功能（比如在第二次登陆的时候使之前登陆的账户所在的Session失效）。</p>
<p>而在集群环境下，由于用户的请求可能分布在不同的Web服务器上，继续将在线用户列表储存在单机内存中已经不能满足需要，不同的Web服务器将会产生不同的在线列表，并且不能有效的实现单一用户登陆的功能，因为某一用户可能并不在接受到退出请求的Web服务器的在线用户列表中（在集群中的某台服务器上完成的登陆操作，而在其他服务器上完成退出操作）。</p>
<a id="more"></a>
<h2 id="现有解决方案："><a href="#现有解决方案：" class="headerlink" title="现有解决方案："></a>现有解决方案：</h2><p>1.将用户的在线情况记录进入数据库中，依靠数据库完成对登陆状况的检测</p>
<p>2.将在线列表放在一个公共的缓存服务器上</p>
<p>由于缓存服务器可以为缓存内容设置指定有效期，可以方便实现Session过期的效果，以及避免让数据库的读写性能成为系统瓶颈等原因，我们采用了Redis来作为缓存服务器用于实现该功能。</p>
<h2 id="单机环境下的解决方案："><a href="#单机环境下的解决方案：" class="headerlink" title="单机环境下的解决方案："></a>单机环境下的解决方案：</h2><h3 id="基于HttpSessionListener："><a href="#基于HttpSessionListener：" class="headerlink" title="基于HttpSessionListener："></a>基于HttpSessionListener：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Hashtable;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xxx.common.util.StringUtil;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@ClassName</span>: SessionListener</div><div class="line"> * <span class="doctag">@Description</span>: 记录所有登陆的Session信息，为在线列表做基础</div><div class="line"> * <span class="doctag">@author</span> BuilderQiu</div><div class="line"> * <span class="doctag">@date</span> 2013-9-18 09:35:13</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//在线列表&lt;uid,session&gt;</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String,HttpSession&gt; sessionList = <span class="keyword">new</span> Hashtable&lt;String, HttpSession&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">//不做处理，只处理登陆用户的列表</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</div><div class="line">        removeSession(event.getSession());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeSession</span><span class="params">(HttpSession session)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(session == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String uid=(String)session.getAttribute(<span class="string">"clientUserId"</span>);<span class="comment">//已登陆状态会将用户的UserId保存在session中</span></div><div class="line">        <span class="keyword">if</span>(!StringUtil.isBlank(uid))&#123;<span class="comment">//判断是否登陆状态</span></div><div class="line">            removeSession(uid);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeSession</span><span class="params">(String uid)</span></span>&#123;</div><div class="line">        HttpSession session = sessionList.get(uid);</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            sessionList.remove(uid);<span class="comment">//先执行，防止session.invalidate()报错而不执行</span></div><div class="line">            <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</div><div class="line">                session.invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(<span class="string">"Session invalidate error!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addSession</span><span class="params">(String uid,HttpSession session)</span></span>&#123;</div><div class="line">        sessionList.put(uid, session);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSessionCount</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Iterator&lt;HttpSession&gt; <span class="title">getSessionSet</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionList.values().iterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpSession <span class="title">getSession</span><span class="params">(String id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionList.get(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String uid)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionList.containsKey(uid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: isLoginOnThisSession</div><div class="line">     * <span class="doctag">@Description</span>: 检测是否已经登陆</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@param</span> uid 用户UserId</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@param</span> sid 发起请求的用户的SessionId</div><div class="line">     * <span class="doctag">@return</span> boolean true 校验通过</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoginOnThisSession</span><span class="params">(String uid,String sid)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(uid==<span class="keyword">null</span>||sid==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(contains(uid))&#123;</div><div class="line">            HttpSession session = sessionList.get(uid);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(session!=<span class="keyword">null</span>&amp;&amp;session.getId().equals(sid))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户的在线状态全部维护记录在sessionList中，并且可以通过sessionList获取到任意用户的session对象，可以用来完成使指定用户离线的功能(调用该用户的session.invalidate()方法)。</p>
<p>用户登录的时候调用addSession(uid,session)方法将用户与其登录的Session信息记录至sessionList中，再退出的时候调用removeSession(session) or removeSession(uid)方法，在强制下线的时候调用removeSession(uid)方法，以及一些其他的操作即可实现相应的功能。</p>
<h2 id="基于Redis的解决方案："><a href="#基于Redis的解决方案：" class="headerlink" title="基于Redis的解决方案："></a>基于Redis的解决方案：</h2><p>该解决方案的实质是将在线列表的所在的内存共享出来，让集群环境下所有的服务器都能够访问到这部分数据，并且将用户的在线状态在这块内存中进行维护。</p>
<h3 id="Redis连接池工具类："><a href="#Redis连接池工具类：" class="headerlink" title="Redis连接池工具类："></a>Redis连接池工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ResourceBundle;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPoolUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool pool;</div><div class="line"></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"redis"</span>);</div><div class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">        <span class="keyword">if</span> (bundle == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"[redis.properties] is not found!"</span>);    </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置池配置项值  </span></div><div class="line">        config.setMaxActive(Integer.valueOf(bundle.getString(<span class="string">"jedis.pool.maxActive"</span>)));    </div><div class="line">        config.setMaxIdle(Integer.valueOf(bundle.getString(<span class="string">"jedis.pool.maxIdle"</span>)));    </div><div class="line">        config.setMaxWait(Long.valueOf(bundle.getString(<span class="string">"jedis.pool.maxWait"</span>)));    </div><div class="line">        config.setTestOnBorrow(Boolean.valueOf(bundle.getString(<span class="string">"jedis.pool.testOnBorrow"</span>)));    </div><div class="line">        config.setTestOnReturn(Boolean.valueOf(bundle.getString(<span class="string">"jedis.pool.testOnReturn"</span>)));</div><div class="line"></div><div class="line">        pool = <span class="keyword">new</span> JedisPool(config, bundle.getString(<span class="string">"redis.ip"</span>),Integer.valueOf(bundle.getString(<span class="string">"redis.port"</span>)) );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: release</div><div class="line">     * <span class="doctag">@Description</span>: 释放连接</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@param</span> jedis</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     * <span class="doctag">@throws</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Jedis jedis)</span></span>&#123;</div><div class="line">        pool.returnResource(jedis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> pool.getResource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Redis在线列表工具类：</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</div><div class="line"><span class="keyword">import</span> net.sf.json.JsonConfig;</div><div class="line"><span class="keyword">import</span> net.sf.json.processors.JsonValueProcessor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.sccl.common.util.StringUtil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xxx.common.util.JsonDateValueProcessor;</div><div class="line"><span class="keyword">import</span> com.xxx.user.model.ClientUser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Pipeline;</div><div class="line"><span class="keyword">import</span> tools.Constants;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * Redis缓存中存放两组key：</div><div class="line"> * 1.SID_PREFIX开头，存放登陆用户的SessionId与ClientUser的Json数据</div><div class="line"> * 2.UID_PREFIX开头，存放登录用户的UID与SessionId对于的数据</div><div class="line"> *</div><div class="line"> * 3.VID_PREFIX开头，存放位于指定页面用户的数据（与Ajax一起使用，用于实现指定页面同时浏览人数的限制功能）</div><div class="line"> *</div><div class="line"> * <span class="doctag">@ClassName</span>: OnlineUtils</div><div class="line"> * <span class="doctag">@Description</span>: 在线列表操作工具类</div><div class="line"> * <span class="doctag">@author</span> BuilderQiu</div><div class="line"> * <span class="doctag">@date</span> 2014-1-9 上午09:25:43</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//KEY值根据SessionID生成    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SID_PREFIX = <span class="string">"online:sid:"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UID_PREFIX = <span class="string">"online:uid:"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VID_PREFIX = <span class="string">"online:vid:"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OVERDATETIME = <span class="number">30</span> * <span class="number">60</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BROADCAST_OVERDATETIME = <span class="number">70</span>;<span class="comment">//ax每60秒发起一次，超过BROADCAST_OVERDATETIME时间长度未发起表示已经离开该页面</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String sid,ClientUser user)</span></span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        jedis.setex(SID_PREFIX+sid, OVERDATETIME, userToString(user));</div><div class="line">        jedis.setex(UID_PREFIX+user.getId(), OVERDATETIME, sid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">broadcast</span><span class="params">(String uid,String identify)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(uid==<span class="keyword">null</span>||<span class="string">""</span>.equals(uid)) <span class="comment">//异常数据，正常情况下登陆用户才会发起该请求</span></div><div class="line">            <span class="keyword">return</span> ;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        jedis.setex(VID_PREFIX+identify+<span class="string">":"</span>+uid, BROADCAST_OVERDATETIME, uid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">userToString</span><span class="params">(ClientUser user)</span></span>&#123;</div><div class="line">        JsonConfig  config = <span class="keyword">new</span> JsonConfig();</div><div class="line">        JsonValueProcessor processor = <span class="keyword">new</span> JsonDateValueProcessor(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">        config.registerJsonValueProcessor(Date.class, processor);</div><div class="line">        JSONObject obj = JSONObject.fromObject(user, config);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> obj.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: logout</div><div class="line">     * <span class="doctag">@Description</span>: 退出</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@param</span> sessionId</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     * <span class="doctag">@throws</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(String sid,String uid)</span></span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        jedis.del(SID_PREFIX+sid);</div><div class="line">        jedis.del(UID_PREFIX+uid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: logout</div><div class="line">     * <span class="doctag">@Description</span>: 退出</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@param</span> UserId  使指定用户下线</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     * <span class="doctag">@throws</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(String uid)</span></span>&#123;</div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        <span class="comment">//删除sid</span></div><div class="line">        jedis.del(SID_PREFIX+jedis.get(UID_PREFIX+uid));</div><div class="line">        <span class="comment">//删除uid</span></div><div class="line">        jedis.del(UID_PREFIX+uid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClientUserBySessionId</span><span class="params">(String sid)</span></span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        String user = jedis.get(SID_PREFIX+sid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClientUserByUid</span><span class="params">(String uid)</span></span>&#123;</div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        String user = jedis.get(SID_PREFIX+jedis.get(UID_PREFIX+uid));</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: online</div><div class="line">     * <span class="doctag">@Description</span>: 所有的key</div><div class="line">     * <span class="doctag">@return</span> List  </div><div class="line">     * <span class="doctag">@throws</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">online</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        Set online = jedis.keys(SID_PREFIX+<span class="string">"*"</span>);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(online);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: online</div><div class="line">     * <span class="doctag">@Description</span>: 分页显示在线列表</div><div class="line">     * <span class="doctag">@return</span> List  </div><div class="line">     * <span class="doctag">@throws</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">onlineByPage</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        Set onlineSet = jedis.keys(SID_PREFIX+<span class="string">"*"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        List onlines =<span class="keyword">new</span> ArrayList(onlineSet);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(onlines.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Pipeline pip = jedis.pipelined();</div><div class="line">        <span class="keyword">for</span>(Object key:onlines)&#123;</div><div class="line">            pip.get(getKey(key));</div><div class="line">        &#125;</div><div class="line">        List result = pip.syncAndReturnAll();</div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        List&lt;ClientUser&gt; listUser=<span class="keyword">new</span> ArrayList&lt;ClientUser&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;result.size();i++)&#123;</div><div class="line">            listUser.add(Constants.json2ClientUser((String)result.get(i)));</div><div class="line">        &#125;</div><div class="line">        Collections.sort(listUser,<span class="keyword">new</span> Comparator&lt;ClientUser&gt;()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ClientUser o1, ClientUser o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> o2.getLastLoginTime().compareTo(o1.getLastLoginTime());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        onlines=listUser;</div><div class="line">        <span class="keyword">int</span> start = (page - <span class="number">1</span>) * pageSize;</div><div class="line">        <span class="keyword">int</span> toIndex=(start+pageSize)&gt;onlines.size()?onlines.size():start+pageSize;</div><div class="line">        List list = onlines.subList(start, toIndex);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line"></div><div class="line">        String temp = String.valueOf(obj);</div><div class="line">        String key[] = temp.split(<span class="string">":"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> SID_PREFIX+key[key.length-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: onlineCount</div><div class="line">     * <span class="doctag">@Description</span>: 总在线人数</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@return</span> int</div><div class="line">     * <span class="doctag">@throws</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">onlineCount</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        Set online = jedis.keys(SID_PREFIX+<span class="string">"*"</span>);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> online.size();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定页面在线人数总数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">broadcastCount</span><span class="params">(String identify)</span> </span>&#123;</div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        Set online = jedis.keys(VID_PREFIX+identify+<span class="string">":*"</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> online.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自己是否在线</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">broadcastIsOnline</span><span class="params">(String identify,String uid)</span> </span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        String online = jedis.get(VID_PREFIX+identify+<span class="string">":"</span>+uid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> !StringUtil.isBlank(online);<span class="comment">//不为空就代表已经找到数据了，也就是上线了</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定页面在线人数总数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">broadcastCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        Set online = jedis.keys(VID_PREFIX+<span class="string">"*"</span>);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> online.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@Title</span>: isOnline</div><div class="line">     * <span class="doctag">@Description</span>: 指定账号是否登陆</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@param</span> sessionId</div><div class="line">     * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@return</span> boolean</div><div class="line">     * <span class="doctag">@throws</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOnline</span><span class="params">(String uid)</span></span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> isLogin = jedis.exists(UID_PREFIX+uid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> isLogin;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOnline</span><span class="params">(String uid,String sid)</span></span>&#123;</div><div class="line"></div><div class="line">        Jedis jedis = RedisPoolUtils.getJedis();</div><div class="line"></div><div class="line">        String loginSid = jedis.get(UID_PREFIX+uid);</div><div class="line"></div><div class="line">        RedisPoolUtils.release(jedis);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sid.equals(loginSid);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于在线状态是记录在Redis中的，并不单纯依靠Session的过期机制来实现，所以需要通过拦截器在每次发送请求的时候去更新Redis中相应的缓存过期时间来更新用户的在线状态。</p>
<p>登陆、退出操作与单机版相似，强制下线需要配合拦截器实现，当用户下次访问的时候，自己来校验自己的状态是否为已经下线，不再由服务器控制。</p>
<p>配合拦截器实现在线状态维持与强制登陆(使其他地方登陆了该账户的用户下线)功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">if</span>(uid != <span class="keyword">null</span>)&#123;<span class="comment">//已登录</span></div><div class="line">    <span class="keyword">if</span>(!OnlineUtils.isOnline(uid, session.getId()))&#123;</div><div class="line">        session.invalidate();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ai.invoke();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        OnlineUtils.login(session.getId(), (ClientUser)session.getAttribute(<span class="string">"clientUser"</span>));</div><div class="line">        <span class="comment">//刷新缓存</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>注：Redis在线列表工具类中的部分代码是后来需要实现限制同时访问指定页面浏览人数功能而添加的，同样基于Redis实现，前端由Ajax轮询来更新用户停留页面的状态。</p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="Redis连接池配置文件："><a href="#Redis连接池配置文件：" class="headerlink" title="Redis连接池配置文件："></a>Redis连接池配置文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">###redis##config########</div><div class="line">#redis服务器ip #</div><div class="line">#redis.ip=localhost</div><div class="line">#redis服务器端口号#</div><div class="line">redis.port=6379</div><div class="line"></div><div class="line">###jedis##pool##config###</div><div class="line">#jedis的最大分配对象#</div><div class="line">jedis.pool.maxActive=1024</div><div class="line">#jedis最大保存idel状态对象数 #</div><div class="line">jedis.pool.maxIdle=200</div><div class="line">#jedis池没有对象返回时，最大等待时间 #</div><div class="line">jedis.pool.maxWait=1000</div><div class="line">#jedis调用borrowObject方法时，是否进行有效检查#</div><div class="line">jedis.pool.testOnBorrow=true</div><div class="line">#jedis调用returnObject方法时，是否进行有效检查 #</div><div class="line">jedis.pool.testOnReturn=true</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      采用Redis完成集群环境下的在线用户列表实现方案，单机环境可以直接依靠SessionListener完成
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Redis" scheme="http://builderqiu.com/tags/Redis/"/>
    
      <category term="在线列表" scheme="http://builderqiu.com/tags/%E5%9C%A8%E7%BA%BF%E5%88%97%E8%A1%A8/"/>
    
      <category term="SessionListener" scheme="http://builderqiu.com/tags/SessionListener/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://builderqiu.com/2014/05/GitComand.html"/>
    <id>http://builderqiu.com/2014/05/GitComand.html</id>
    <published>2014-05-25T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:39.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git clone &lt;url&gt; #克隆远程版本库</div><div class="line">$ git init #初始化本地版本库</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status #查看状态</div><div class="line">$ git diff #查看变更内容</div><div class="line">$ git add . #跟踪所有改动过的文件</div><div class="line">$ git add &lt;file&gt; #跟踪指定的文件</div><div class="line">$ git mv &lt;old&gt; &lt;new&gt; #文件改名</div><div class="line">$ git rm &lt;file&gt; #删除文件</div><div class="line">$ git rm --cached &lt;file&gt; #停止跟踪文件但不删除</div><div class="line">$ git commit -m “commit message” #提交所有更新过的文件</div><div class="line">$ git commit --amend #修改最后一次提交</div></pre></td></tr></table></figure>
<h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git log #查看提交历史</div><div class="line">$ git log -p &lt;file&gt; #查看指定文件的提交历史</div><div class="line">$ git blame &lt;file&gt; #以列表方式查看指定文件的提交历史</div></pre></td></tr></table></figure>
<h2 id="撤消"><a href="#撤消" class="headerlink" title="撤消"></a>撤消</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD #撤消工作目录中所有未提交文件的修改内容</div><div class="line">$ git checkout HEAD &lt;file&gt; #撤消指定的未提交文件的修改内容</div><div class="line">$ git checkout --&lt;File&gt; #让这个文件回到最近一次commit或add时的状态</div><div class="line">$ git revert &lt;commit&gt; #撤消指定的提交</div></pre></td></tr></table></figure>
<h2 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git branch #显示所有本地分支</div><div class="line">$ git checkout &lt;branch/tag&gt; #切换到指定分支或标签</div><div class="line">$ git checkout -c &lt;branch/tag&gt; #创建并切换到指定分支或标签</div><div class="line">$ git branch &lt;new-branch&gt; #创建新分支</div><div class="line">$ git branch -d &lt;branch&gt; #删除本地分支</div><div class="line">$ git tag #列出所有本地标签</div><div class="line">$ git tag -a tagname -m &quot; &quot; #可以指定标签信息</div><div class="line"># git show #可以查看标签详细信息</div><div class="line">$ git tag &lt;tagname&gt; #基于最新提交创建标签</div><div class="line">$ git tag -d &lt;tagname&gt; #删除标签</div><div class="line">$ git push origin tagname #可以推送一个本地标签</div><div class="line">$ git push origin --tags #可以推送全部未推送过的本地标签</div><div class="line">$ git tag -d tagname #可以删除一个本地标签</div><div class="line">$ git push origin :refs/tags/tagname #可以删除一个远程标签</div></pre></td></tr></table></figure>
<h2 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git merge &lt;branch&gt; #合并指定分支到当前分支</div><div class="line">$ git rebase &lt;branch&gt; #衍合指定分支到当前分支</div></pre></td></tr></table></figure>
<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git remote -v #查看远程版本库信息</div><div class="line">$ git remote show &lt;remote&gt; #查看指定远程版本库信息</div><div class="line">$ git remote add &lt;remote&gt; &lt;url&gt; #添加远程版本库</div><div class="line">$ git fetch &lt;remote&gt; #从远程库获取代码</div><div class="line">$ git pull &lt;remote&gt; &lt;branch&gt; #下载代码及快速合并</div><div class="line">$ git push &lt;remote&gt; &lt;branch&gt; #上传代码及快速合并</div><div class="line">$ git push &lt;remote&gt; :&lt;branch/tag-name&gt; #删除远程分支或标签</div><div class="line">$ git push --tags #上传所有标签</div></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><a href="http://7vzn9h.com1.z0.glb.clouddn.com/images/blog/git.png" target="_blank" rel="external">Git常用命令</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建版本库&quot;&gt;&lt;a href=&quot;#创建版本库&quot; class=&quot;headerlink&quot; title=&quot;创建版本库&quot;&gt;&lt;/a&gt;创建版本库&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git clone &amp;lt;url&amp;gt; #克隆远程版本库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git init #初始化本地版本库&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="git" scheme="http://builderqiu.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>基于DFA的关键字过滤实现</title>
    <link href="http://builderqiu.com/2014/05/KeywordFilterBaseOnDFA.html"/>
    <id>http://builderqiu.com/2014/05/KeywordFilterBaseOnDFA.html</id>
    <published>2014-05-24T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:05.372Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/BuilderQiu/7477478" target="_blank" rel="external">GISTS地址</a></p>
<a id="more"></a>
<script src="https://gist.github.com/BuilderQiu/7477478.js"></script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://gist.github.com/BuilderQiu/7477478&quot;&gt;GISTS地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="DFA" scheme="http://builderqiu.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>使用消息队列异步化系统</title>
    <link href="http://builderqiu.com/2014/05/AsyncSystemByMQ.html"/>
    <id>http://builderqiu.com/2014/05/AsyncSystemByMQ.html</id>
    <published>2014-05-22T16:00:00.000Z</published>
    <updated>2016-12-25T08:21:48.907Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2014/06/AsyncSystemBaseOnSpring.html">基于Spring与ActiveMQ的配置实现方案</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前期为了快速开发，项目结构较为混乱，代码维护与功能扩展都比较困难，为了方便后续功能开发，最近对项目进行的重构，顺便在重构的过程中将之前的部分操作进行了异步处理，也第一次实际接触了JMS与消息队列。项目中采用的消息中间件为ActiveMQ。</p>
<a id="more"></a>
<h2 id="什么是JMS"><a href="#什么是JMS" class="headerlink" title="什么是JMS"></a>什么是JMS</h2><p>Java消息服务（Java Message Service，JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。</p>
<p>Java消息服务的规范包括两种消息模式，点对点和发布者／订阅者。许多提供商支持这一通用框架因此，程序员可以在他们的分布式软件中实现面向消息的操作，这些操作将具有不同面向消息中间件产品的可移植性。</p>
<p>Java消息服务支持同步和异步的消息处理，在某些场景下，异步消息是必要的；在其他场景下，异步消息比同步消息操作更加便利。</p>
<p>Java消息服务支持面向事件的方法接收消息，事件驱动的程序设计现在被广泛认为是一种富有成效的程序设计范例，程序员们都相当熟悉。</p>
<p>在应用系统开发时，Java消息服务可以推迟选择面对消息中间件产品，也可以在不同的面对消息中间件切换。——Wiki</p>
<h2 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h2><p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自使用者。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的资料，包含发生的时间，输入装置的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列互交。消息会保存在队列中，直到接收者取回它。</p>
<p>目前，有很多消息队列有很多开源的实现，包括JBoss Messaging、JORAM、Apache ActiveMQ、Sun Open Message Queue、Apache Qpid和HTTPSQS。</p>
<p>消息队列本身是异步的，它允许接收者在消息发送很长时间后再取回消息，这和大多数通信协议是不同的。例如WWW中使用的HTTP协议是同步的，因为客户端在发出请求后必须等待服务器回应。然而，很多情况下我们需要异步的通信协议。比如，一个进程通知另一个进程发生了一个事件，但不需要等待回应。但消息队列的异步特点，也造成了一个缺点，就是接收者必须轮询消息队列，才能收到最近的消息。</p>
<p>和信号相比，消息队列能够传递更多的信息。与管道相比，消息队列提供了有格式的数据，这可以减少开发人员的工作量。但消息队列仍然有大小限制。——Wiki</p>
<p><a href="http://www.oschina.net/translate/top-10-uses-for-message-queue" target="_blank" rel="external">使用消息队列的优点</a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>基本类图结构如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7vzn9h.com1.z0.glb.clouddn.com/images/blog/asyncwork.png" alt="类结构" title="">
                </div>
                <div class="image-caption">类结构</div>
            </figure></p>
<p>说明：</p>
<p>AsyncWork：消息的处理类接口，定义各类型的消息的处理方式</p>
<p>AsyncWorkProducer：消息的生产者（JMS生产者），负责向消息队列里面放入消息</p>
<p>AsyncWorkConsumer：消息的消费者（JMS消费者），负责从消息队列中消费消息</p>
<p>AsyncWorkFactory：对外提供的服务的工厂类</p>
<p>EmailWork、PushNotificationWork、LoginLogWork…：实现AsyncWork接口，定义消息的具体处理方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncWorkProducer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//ConnectionFactory ：连接工厂，JMS 用它创建连接</span></div><div class="line">    <span class="keyword">private</span> ConnectionFactory connectionFactory;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String queueName = <span class="string">"QueueName"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncWorkProducer</span><span class="params">(String queueName)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.queueName = queueName;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                    ActiveMQConnection.DEFAULT_USER,</div><div class="line">                    ActiveMQConnection.DEFAULT_PASSWORD,</div><div class="line">                    SystemConfiguration.getString(<span class="string">"asyc.location"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Message message)</span></span>&#123;</div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// Connection ：JMS 客户端到JMS Provider 的连接 | 构造ConnectionFactory实例对象，此处采用ActiveMq的实现jar</span></div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            <span class="comment">//启动</span></div><div class="line">            connection.start();</div><div class="line">             <span class="comment">// Session： 一个发送或接收消息的线程  | 获取操作连接</span></div><div class="line">            Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</div><div class="line">             <span class="comment">// Destination ：消息的目的地;消息发送给谁.</span></div><div class="line">            Destination destination = session.createQueue(queueName);</div><div class="line">             <span class="comment">// MessageProducer：消息发送者 |得到消息生成者【发送者】</span></div><div class="line">            MessageProducer producer = session.createProducer(destination);</div><div class="line">            <span class="comment">//设置不持久化，实际根据项目决定</span></div><div class="line">            producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</div><div class="line">             <span class="comment">// 发送消息到目的地方</span></div><div class="line">            producer.send(message);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != connection)&#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务工厂类，貌似作用不大：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncWorkFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, AsyncWorkProducer&gt; chm = <span class="keyword">new</span> ConcurrentHashMap&lt;String, AsyncWorkProducer&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AsyncWorkFactory</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AsyncWorkProducer <span class="title">getProducer</span><span class="params">(String queueName)</span></span>&#123;</div><div class="line">        AsyncWorkProducer awp = chm.get(queueName);</div><div class="line">        <span class="keyword">if</span>(awp==<span class="keyword">null</span>)&#123;</div><div class="line">            awp = <span class="keyword">new</span> AsyncWorkProducer(queueName);</div><div class="line">            chm.put(queueName, awp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> awp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Message message,String queueName)</span></span>&#123;</div><div class="line">        getProducer(queueName).sendMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程监听：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncWorkConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="comment">// ConnectionFactory ：连接工厂，JMS 用它创建连接</span></div><div class="line">    <span class="keyword">private</span> ConnectionFactory connectionFactory;</div><div class="line">    <span class="keyword">private</span> AsycWork work;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String queueName = <span class="string">"QueueName"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncWorkConsumer</span><span class="params">(String queueName,AsycWork work)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.queueName = queueName;</div><div class="line">        <span class="keyword">this</span>.work = work;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                    ActiveMQConnection.DEFAULT_USER,</div><div class="line">                    ActiveMQConnection.DEFAULT_PASSWORD,</div><div class="line">                    SystemConfiguration.getString(<span class="string">"asyc.location"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// Connection ：JMS 客户端到JMS Provider 的连接 | 构造ConnectionFactory实例对象，此处采用ActiveMq的实现jar</span></div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            connection.start();</div><div class="line">             <span class="comment">// Session： 一个发送或接收消息的线程  | 获取操作连接</span></div><div class="line">            Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</div><div class="line">             <span class="comment">// Destination ：消息的目的地;消息发送给谁.</span></div><div class="line">            Destination destination = session.createQueue(queueName);</div><div class="line">             <span class="comment">// MessageProducer：消息发送者 |得到消息生成者【发送者】</span></div><div class="line">             MessageConsumer consumer = session.createConsumer(destination);</div><div class="line">             <span class="comment">//设置不持久化，实际根据项目决定</span></div><div class="line">             <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    <span class="comment">//可设置接收者接收消息的时间 consumer.recevie(xxx)</span></div><div class="line">                    Message message =  consumer.receive();</div><div class="line">                    work.execute(message);</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != connection)&#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回调处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailWorker</span> <span class="keyword">implements</span> <span class="title">AsycWork</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(EmailWorker.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line"></div><div class="line">        ActiveMQMapMessage msg = (ActiveMQMapMessage) message;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String address = msg.getString(<span class="string">"address"</span>);</div><div class="line">            String title = msg.getString(<span class="string">"title"</span>);</div><div class="line">            String content = msg.getString(<span class="string">"content"</span>);</div><div class="line"></div><div class="line">            Constants.sendMail(address, title, content);</div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">            log.error(<span class="string">"异步邮件发送异常"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>项目启动时执行如下代码启动线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Thread emailThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AsyncWorkConsumer(AsycWork.EMAIL,emailWorker));</div><div class="line">emailThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">emailThread.start();</div><div class="line"></div><div class="line"><span class="comment">//启动线程绑定各种回调</span></div><div class="line">Thread normalLogThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AsyncWorkConsumer(AsycWork.NORMAL_LOG,normalLogWork));</div><div class="line">normalLogThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">normalLogThread.start();</div><div class="line"></div><div class="line">Thread loginLogThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AsyncWorkConsumer(AsycWork.LOGIN_LOG,loginLogWorker));</div><div class="line">loginLogThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">loginLogThread.start();</div></pre></td></tr></table></figure>
<p>调用异步的工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(AsyncUtils.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String type,String operate)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_NORMAL_LOG))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            User user = (User) SecurityUtils.getSubject().getSession().getAttribute(<span class="string">"loginUser"</span>);            </div><div class="line">            <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            OperateLog log = <span class="keyword">new</span> OperateLog(user.getId(), user.getName(), operate,type, user.getLastLoginIp());</div><div class="line">            ActiveMQObjectMessage message = <span class="keyword">new</span> ActiveMQObjectMessage();</div><div class="line">            message.setObject(log);</div><div class="line">            AsyncWorkFactory.sendMessage(message, AsycWork.NORMAL_LOG);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"日志记录出错!"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String address,String title,String content)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_SEND_MAIL))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;            </div><div class="line">            ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">            message.setString(<span class="string">"address"</span>, address);</div><div class="line">            message.setString(<span class="string">"title"</span>, title);</div><div class="line">            message.setString(<span class="string">"content"</span>, content);</div><div class="line"></div><div class="line">            AsyncWorkFactory.sendMessage(message, AsycWork.EMAIL);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"邮件发送出错！"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loginLog</span><span class="params">(String uid,String ip,Date date)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_LOG_CLIENTUSER_LOGINLOG))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">            message.setString(<span class="string">"uid"</span>, uid);</div><div class="line">            message.setString(<span class="string">"ip"</span>, ip);</div><div class="line">            message.setString(<span class="string">"date"</span>, DateUtils.formatDateTime(date, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line"></div><div class="line">            AsyncWorkFactory.sendMessage(message, AsycWork.LOGIN_LOG);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"邮件发送出错！"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在需要异步处理的地方执行类似如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AsyncUtils.sendMail(<span class="string">"xxx@xxx.com"</span>, <span class="string">"邮件标题"</span>, <span class="string">"邮件内容"</span>);<span class="comment">//异步发送邮件</span></div></pre></td></tr></table></figure>
<p>这样就可以执行异步操作了。</p>
<h2 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h2><p>异步系统适用于与主要业务逻辑无关的较耗时或不需要同步操作的，失败时不影响主业务逻辑的功能点：</p>
<p>比如：1.在用户注册的时候记录数据做后期统计、发送注册成功邮件等</p>
<p>　　　　2.系统操作的日志记录</p>
<p>　　　　3.iOS消息推送</p>
<p>　　　　4.发送短信</p>
<p>　　　　   …</p>
<p>在使用异步系统之前，用户注册与注册日志记录是在同一个事务完成的，用户注册失败则不会记录日志，但同时，日志记录发生异常也会引起用户注册失败，日志记录本身是与用户注册这个逻辑不相关的工作，在日志发生异常的时候不应该使用户注册失败。</p>
<p>在使用异步系统之后，用户注册逻辑执行结束后，调用异步的注册日志记录与异步的注册邮件发送功能即可，不用等待日志记录与邮件发送的返回，即可直接返回用户注册成功。将日志与邮件异步处理，既提高了响应速度也使逻辑更加严谨。在发生异常的时候，消息队列会将消息继续保留，留待后续处理。</p>
<blockquote>
<p>PS：本文的实现方式大部分为自己摸索的，之前没有接触过类似的模块，所以有些地方都是按照自己的理解处理的，通用的异步系统是不是这种结构本人不是太了解，欢迎交流。后面会介绍一下最新的实现方式，修改为了基于Spring管理的异步系统，将ActiveMQ丢给了Spring，依靠Spring发送与监听消息，相比这个可能会更靠谱一点。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2014/06/AsyncSystemBaseOnSpring.html&quot;&gt;基于Spring与ActiveMQ的配置实现方案&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前期为了快速开发，项目结构较为混乱，代码维护与功能扩展都比较困难，为了方便后续功能开发，最近对项目进行的重构，顺便在重构的过程中将之前的部分操作进行了异步处理，也第一次实际接触了JMS与消息队列。项目中采用的消息中间件为ActiveMQ。&lt;/p&gt;
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Spring" scheme="http://builderqiu.com/tags/Spring/"/>
    
      <category term="Async" scheme="http://builderqiu.com/tags/Async/"/>
    
  </entry>
  
  <entry>
    <title>使用消息队列异步化系统</title>
    <link href="http://builderqiu.com/2014/05/AsyncSystem.html"/>
    <id>http://builderqiu.com/2014/05/AsyncSystem.html</id>
    <published>2014-05-22T16:00:00.000Z</published>
    <updated>2016-12-25T08:22:17.812Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2014/06/AsyncSystemBaseOnSpring.html">基于Spring与ActiveMQ的配置实现方案</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前期为了快速开发，项目结构较为混乱，代码维护与功能扩展都比较困难，为了方便后续功能开发，最近对项目进行的重构，顺便在重构的过程中将之前的部分操作进行了异步处理，也第一次实际接触了JMS与消息队列。项目中采用的消息中间件为ActiveMQ。</p>
<h2 id="什么是JMS"><a href="#什么是JMS" class="headerlink" title="什么是JMS"></a>什么是JMS</h2><p>Java消息服务（Java Message Service，JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。</p>
<p>Java消息服务的规范包括两种消息模式，点对点和发布者／订阅者。许多提供商支持这一通用框架因此，程序员可以在他们的分布式软件中实现面向消息的操作，这些操作将具有不同面向消息中间件产品的可移植性。</p>
<p>Java消息服务支持同步和异步的消息处理，在某些场景下，异步消息是必要的；在其他场景下，异步消息比同步消息操作更加便利。</p>
<p>Java消息服务支持面向事件的方法接收消息，事件驱动的程序设计现在被广泛认为是一种富有成效的程序设计范例，程序员们都相当熟悉。</p>
<p>在应用系统开发时，Java消息服务可以推迟选择面对消息中间件产品，也可以在不同的面对消息中间件切换。——Wiki</p>
<h2 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h2><p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自使用者。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的资料，包含发生的时间，输入装置的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列互交。消息会保存在队列中，直到接收者取回它。</p>
<p>目前，有很多消息队列有很多开源的实现，包括JBoss Messaging、JORAM、Apache ActiveMQ、Sun Open Message Queue、Apache Qpid和HTTPSQS。</p>
<p>消息队列本身是异步的，它允许接收者在消息发送很长时间后再取回消息，这和大多数通信协议是不同的。例如WWW中使用的HTTP协议是同步的，因为客户端在发出请求后必须等待服务器回应。然而，很多情况下我们需要异步的通信协议。比如，一个进程通知另一个进程发生了一个事件，但不需要等待回应。但消息队列的异步特点，也造成了一个缺点，就是接收者必须轮询消息队列，才能收到最近的消息。</p>
<p>和信号相比，消息队列能够传递更多的信息。与管道相比，消息队列提供了有格式的数据，这可以减少开发人员的工作量。但消息队列仍然有大小限制。——Wiki</p>
<p><a href="http://www.oschina.net/translate/top-10-uses-for-message-queue" target="_blank" rel="external">使用消息队列的优点</a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>基本类图结构如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/assets/blog/img/asyncwork.png" alt="类结构" title="">
                </div>
                <div class="image-caption">类结构</div>
            </figure></p>
<p>说明：</p>
<p>AsyncWork：消息的处理类接口，定义各类型的消息的处理方式</p>
<p>AsyncWorkProducer：消息的生产者（JMS生产者），负责向消息队列里面放入消息</p>
<p>AsyncWorkConsumer：消息的消费者（JMS消费者），负责从消息队列中消费消息</p>
<p>AsyncWorkFactory：对外提供的服务的工厂类</p>
<p>EmailWork、PushNotificationWork、LoginLogWork…：实现AsyncWork接口，定义消息的具体处理方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncWorkProducer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//ConnectionFactory ：连接工厂，JMS 用它创建连接</span></div><div class="line">    <span class="keyword">private</span> ConnectionFactory connectionFactory;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String queueName = <span class="string">"QueueName"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncWorkProducer</span><span class="params">(String queueName)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.queueName = queueName;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                    ActiveMQConnection.DEFAULT_USER,</div><div class="line">                    ActiveMQConnection.DEFAULT_PASSWORD,</div><div class="line">                    SystemConfiguration.getString(<span class="string">"asyc.location"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Message message)</span></span>&#123;</div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// Connection ：JMS 客户端到JMS Provider 的连接 | 构造ConnectionFactory实例对象，此处采用ActiveMq的实现jar</span></div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            <span class="comment">//启动</span></div><div class="line">            connection.start();</div><div class="line">             <span class="comment">// Session： 一个发送或接收消息的线程  | 获取操作连接</span></div><div class="line">            Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</div><div class="line">             <span class="comment">// Destination ：消息的目的地;消息发送给谁.</span></div><div class="line">            Destination destination = session.createQueue(queueName);</div><div class="line">             <span class="comment">// MessageProducer：消息发送者 |得到消息生成者【发送者】</span></div><div class="line">            MessageProducer producer = session.createProducer(destination);</div><div class="line">            <span class="comment">//设置不持久化，实际根据项目决定</span></div><div class="line">            producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</div><div class="line">             <span class="comment">// 发送消息到目的地方</span></div><div class="line">            producer.send(message);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != connection)&#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务工厂类，貌似作用不大：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncWorkFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, AsyncWorkProducer&gt; chm = <span class="keyword">new</span> ConcurrentHashMap&lt;String, AsyncWorkProducer&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AsyncWorkFactory</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AsyncWorkProducer <span class="title">getProducer</span><span class="params">(String queueName)</span></span>&#123;</div><div class="line">        AsyncWorkProducer awp = chm.get(queueName);</div><div class="line">        <span class="keyword">if</span>(awp==<span class="keyword">null</span>)&#123;</div><div class="line">            awp = <span class="keyword">new</span> AsyncWorkProducer(queueName);</div><div class="line">            chm.put(queueName, awp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> awp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Message message,String queueName)</span></span>&#123;</div><div class="line">        getProducer(queueName).sendMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程监听：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncWorkConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="comment">// ConnectionFactory ：连接工厂，JMS 用它创建连接</span></div><div class="line">    <span class="keyword">private</span> ConnectionFactory connectionFactory;</div><div class="line">    <span class="keyword">private</span> AsycWork work;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String queueName = <span class="string">"QueueName"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncWorkConsumer</span><span class="params">(String queueName,AsycWork work)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.queueName = queueName;</div><div class="line">        <span class="keyword">this</span>.work = work;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                    ActiveMQConnection.DEFAULT_USER,</div><div class="line">                    ActiveMQConnection.DEFAULT_PASSWORD,</div><div class="line">                    SystemConfiguration.getString(<span class="string">"asyc.location"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// Connection ：JMS 客户端到JMS Provider 的连接 | 构造ConnectionFactory实例对象，此处采用ActiveMq的实现jar</span></div><div class="line">            connection = connectionFactory.createConnection();</div><div class="line">            connection.start();</div><div class="line">             <span class="comment">// Session： 一个发送或接收消息的线程  | 获取操作连接</span></div><div class="line">            Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</div><div class="line">             <span class="comment">// Destination ：消息的目的地;消息发送给谁.</span></div><div class="line">            Destination destination = session.createQueue(queueName);</div><div class="line">             <span class="comment">// MessageProducer：消息发送者 |得到消息生成者【发送者】</span></div><div class="line">             MessageConsumer consumer = session.createConsumer(destination);</div><div class="line">             <span class="comment">//设置不持久化，实际根据项目决定</span></div><div class="line">             <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    <span class="comment">//可设置接收者接收消息的时间 consumer.recevie(xxx)</span></div><div class="line">                    Message message =  consumer.receive();</div><div class="line">                    work.execute(message);</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != connection)&#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回调处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailWorker</span> <span class="keyword">implements</span> <span class="title">AsycWork</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(EmailWorker.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line"></div><div class="line">        ActiveMQMapMessage msg = (ActiveMQMapMessage) message;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String address = msg.getString(<span class="string">"address"</span>);</div><div class="line">            String title = msg.getString(<span class="string">"title"</span>);</div><div class="line">            String content = msg.getString(<span class="string">"content"</span>);</div><div class="line"></div><div class="line">            Constants.sendMail(address, title, content);</div><div class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">            log.error(<span class="string">"异步邮件发送异常"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>项目启动时执行如下代码启动线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Thread emailThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AsyncWorkConsumer(AsycWork.EMAIL,emailWorker));</div><div class="line">emailThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">emailThread.start();</div><div class="line"></div><div class="line"><span class="comment">//启动线程绑定各种回调</span></div><div class="line">Thread normalLogThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AsyncWorkConsumer(AsycWork.NORMAL_LOG,normalLogWork));</div><div class="line">normalLogThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">normalLogThread.start();</div><div class="line"></div><div class="line">Thread loginLogThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> AsyncWorkConsumer(AsycWork.LOGIN_LOG,loginLogWorker));</div><div class="line">loginLogThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">loginLogThread.start();</div></pre></td></tr></table></figure>
<p>调用异步的工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(AsyncUtils.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String type,String operate)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_NORMAL_LOG))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            User user = (User) SecurityUtils.getSubject().getSession().getAttribute(<span class="string">"loginUser"</span>);            </div><div class="line">            <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            OperateLog log = <span class="keyword">new</span> OperateLog(user.getId(), user.getName(), operate,type, user.getLastLoginIp());</div><div class="line">            ActiveMQObjectMessage message = <span class="keyword">new</span> ActiveMQObjectMessage();</div><div class="line">            message.setObject(log);</div><div class="line">            AsyncWorkFactory.sendMessage(message, AsycWork.NORMAL_LOG);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"日志记录出错!"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String address,String title,String content)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_SEND_MAIL))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>&#123;            </div><div class="line">            ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">            message.setString(<span class="string">"address"</span>, address);</div><div class="line">            message.setString(<span class="string">"title"</span>, title);</div><div class="line">            message.setString(<span class="string">"content"</span>, content);</div><div class="line"></div><div class="line">            AsyncWorkFactory.sendMessage(message, AsycWork.EMAIL);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"邮件发送出错！"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loginLog</span><span class="params">(String uid,String ip,Date date)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!SystemConfigFromDB.getBoolean(SystemConfigFromDB.NEED_LOG_CLIENTUSER_LOGINLOG))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            ActiveMQMapMessage message = <span class="keyword">new</span> ActiveMQMapMessage();</div><div class="line">            message.setString(<span class="string">"uid"</span>, uid);</div><div class="line">            message.setString(<span class="string">"ip"</span>, ip);</div><div class="line">            message.setString(<span class="string">"date"</span>, DateUtils.formatDateTime(date, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line"></div><div class="line">            AsyncWorkFactory.sendMessage(message, AsycWork.LOGIN_LOG);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"邮件发送出错！"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在需要异步处理的地方执行类似如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AsyncUtils.sendMail(<span class="string">"xxx@xxx.com"</span>, <span class="string">"邮件标题"</span>, <span class="string">"邮件内容"</span>);<span class="comment">//异步发送邮件</span></div></pre></td></tr></table></figure>
<p>这样就可以执行异步操作了。</p>
<h2 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h2><p>异步系统适用于与主要业务逻辑无关的较耗时或不需要同步操作的，失败时不影响主业务逻辑的功能点：</p>
<p>比如：1.在用户注册的时候记录数据做后期统计、发送注册成功邮件等</p>
<p>　　　　2.系统操作的日志记录</p>
<p>　　　　3.iOS消息推送</p>
<p>　　　　4.发送短信</p>
<p>　　　　   …</p>
<p>在使用异步系统之前，用户注册与注册日志记录是在同一个事务完成的，用户注册失败则不会记录日志，但同时，日志记录发生异常也会引起用户注册失败，日志记录本身是与用户注册这个逻辑不相关的工作，在日志发生异常的时候不应该使用户注册失败。</p>
<p>在使用异步系统之后，用户注册逻辑执行结束后，调用异步的注册日志记录与异步的注册邮件发送功能即可，不用等待日志记录与邮件发送的返回，即可直接返回用户注册成功。将日志与邮件异步处理，既提高了响应速度也使逻辑更加严谨。在发生异常的时候，消息队列会将消息继续保留，留待后续处理。</p>
<blockquote>
<p>PS：本文的实现方式大部分为自己摸索的，之前没有接触过类似的模块，所以有些地方都是按照自己的理解处理的，通用的异步系统是不是这种结构本人不是太了解，欢迎交流。后面会介绍一下最新的实现方式，修改为了基于Spring管理的异步系统，将ActiveMQ丢给了Spring，依靠Spring发送与监听消息，相比这个可能会更靠谱一点。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2014/06/AsyncSystemBaseOnSpring.html&quot;&gt;基于Spring与ActiveMQ的配置实现方案&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Annotation与SpringAOP的缓存简单解决方案</title>
    <link href="http://builderqiu.com/2014/05/MemcacheAnnotationBaseOnSpringAop.html"/>
    <id>http://builderqiu.com/2014/05/MemcacheAnnotationBaseOnSpringAop.html</id>
    <published>2014-05-20T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:12.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>  由于项目的原因，需要对项目中大量访问多修改少的数据进行缓存并管理，为达到开发过程中通过Annotation简单的配置既可以完成对缓存的设置与更新的需求，故而设计的该简易的解决方案。</p>
<a id="more"></a>
<p>涉及技术：</p>
<p>1.Spring AOP</p>
<p>2.Java Annotation</p>
<p>3.Memcache （项目中使用的缓存组件）</p>
<p>4.JVM基础 （Class文件结构，用于解析出方法中的形参名称，动态生成缓存key，目测效率不高0.0）</p>
<p>5.Ognl （用于动态解析缓存的key）</p>
<h2 id="实现细节："><a href="#实现细节：" class="headerlink" title="实现细节："></a>实现细节：</h2><p>  Annotation：LoadFromMemcached<br>  用于method之上的注解，作用是使带有该注解的method在调用的时候先经过缓存查询，缓存中查询不到再去数据库查询并将结果缓存至缓存服务器Memcache中，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoadFromMemcached &#123;</div><div class="line"></div><div class="line">   <span class="function">String <span class="title">value</span><span class="params">()</span></span>;<span class="comment">//缓存的key     </span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">int</span> <span class="title">timeScope</span><span class="params">()</span> <span class="keyword">default</span> 600</span>;<span class="comment">//默认过期时间，单位秒</span></div><div class="line"></div><div class="line">   <span class="function">String <span class="title">condition</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//执行缓存查询的条件</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Annotation：UpdateForMemcached 类似于LoadFromMemcached，作用是使带有该注解的method在调用的时候更新缓存服务器中的缓存，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UpdateForMemcached &#123;</div><div class="line"></div><div class="line">  String[] value();<span class="comment">//可能有多个key需要更新</span></div><div class="line"></div><div class="line">  <span class="function">String <span class="title">condition</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//执行缓存的条件</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> AOP：MemcachedCacheInterceptor 缓存AOP实现的核心类，用于对Annotation注解了的method进行拦截并进行相应的操作，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.rubyeye.xmemcached.MemcachedClient;</div><div class="line"><span class="keyword">import</span> net.rubyeye.xmemcached.exception.MemcachedException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ognl.Ognl;</div><div class="line"><span class="keyword">import</span> ognl.OgnlException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemcachedCacheInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String GET = <span class="string">"@annotation(LoadFromMemcached)"</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String UPDATE = <span class="string">"@annotation(UpdateForMemcached)"</span>;</div><div class="line">  <span class="comment">// 替换为其他缓存组件即可切换为其他缓存系统，这里是使用的Memcached。如果再抽象一层缓存系统管理，则可以动态的更换缓存系统。</span></div><div class="line">  <span class="meta">@Resource</span></div><div class="line">  <span class="keyword">private</span> MemcachedClient cache;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Logger log = LoggerFactory</div><div class="line">      .getLogger(MemcachedCacheInterceptor.class);</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * <span class="doctag">@Title</span>: get</div><div class="line">   * <span class="doctag">@Description</span>: 首先从缓存中加载数据，缓存命中则返回数据，未命中则从数据库查找，并加入缓存</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> call</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@throws</span> Throwable</div><div class="line">   * <span class="doctag">@return</span> Object</div><div class="line">   * <span class="doctag">@throws</span></div><div class="line">   */</div><div class="line">  <span class="meta">@Around</span>(GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(ProceedingJoinPoint call)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">    LoadFromMemcached anno = getAnnotation(call, LoadFromMemcached.class);</div><div class="line">    String key = anno.value();</div><div class="line">    <span class="keyword">int</span> timeSocpe = anno.timeScope();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!executeCondition(anno.condition(), call)) &#123;<span class="comment">// 不满足条件,直接调用方法，不进行缓存AOP操作</span></div><div class="line">      <span class="keyword">return</span> call.proceed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    key = getKeyNameFromParam(key, call);</div><div class="line"></div><div class="line">    Object value = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      value = cache.get(key);</div><div class="line">    &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</div><div class="line">      log.error(<span class="string">"Get Data From Memcached TimeOut!About Key:"</span> + key, e);</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">      log.error(</div><div class="line">          <span class="string">"Get Data From Memcached TimeOut And Interrupted!About Key:"</span></div><div class="line">              + key, e);</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</div><div class="line">      log.error(</div><div class="line">          <span class="string">"Get Data From Memcached And Happend A Unexpected Error!About Key:"</span></div><div class="line">              + key, e);</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">      value = call.proceed();</div><div class="line">      <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          cache.add(key, timeSocpe, value);</div><div class="line">          log.info(<span class="string">"Add Data For Memcached Success!About Key:"</span> + key);</div><div class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</div><div class="line">          log.error(</div><div class="line">              <span class="string">"Add Data For Memcached TimeOut!About Key:"</span> + key,</div><div class="line">              e);</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">          log.error(</div><div class="line">              <span class="string">"Add Data For Memcached TimeOut And Interrupted!About Key:"</span></div><div class="line">                  + key, e);</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</div><div class="line">          log.error(</div><div class="line">              <span class="string">"Add Data For Memcached And Happend A Unexpected Error!About Key:"</span></div><div class="line">                  + key, e);</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * <span class="doctag">@Title</span>: update</div><div class="line">   * <span class="doctag">@Description</span>: 执行方法的同时更新缓存中的数据</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> call</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@throws</span> Throwable</div><div class="line">   * <span class="doctag">@return</span> Object</div><div class="line">   * <span class="doctag">@throws</span></div><div class="line">   */</div><div class="line">  <span class="meta">@Around</span>(UPDATE)</div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">update</span><span class="params">(ProceedingJoinPoint call)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">    UpdateForMemcached anno = getAnnotation(call, UpdateForMemcached.class);</div><div class="line">    String[] key = anno.value();<span class="comment">// 可能需要更新多个key</span></div><div class="line"></div><div class="line">    Object value = call.proceed();</div><div class="line">    <span class="keyword">if</span> (!executeCondition(anno.condition(), call)) &#123;<span class="comment">// 不满足条件,直接调用方法，不进行缓存AOP操作</span></div><div class="line">      <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">for</span> (String singleKey : key) &#123;<span class="comment">// 循环处理所有需要更新的key</span></div><div class="line">          String tempKey = getKeyNameFromParam(singleKey, call);</div><div class="line">          cache.delete(tempKey);</div><div class="line">        &#125;</div><div class="line">        log.info(<span class="string">"Update Data For Memcached Success!About Key:"</span> + key);</div><div class="line">      &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</div><div class="line">        log.error(<span class="string">"Update Data For Memcached TimeOut!About Key:"</span> + key,</div><div class="line">            e);</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        log.error(</div><div class="line">            <span class="string">"Update Data For Memcached TimeOut And Interrupted!About Key:"</span></div><div class="line">                + key, e);</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125; <span class="keyword">catch</span> (MemcachedException e) &#123;</div><div class="line">        log.error(</div><div class="line">            <span class="string">"Update Data For Memcached And Happend A Unexpected Error!About Key:"</span></div><div class="line">                + key, e);</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * <span class="doctag">@Title</span>: getAnnotation</div><div class="line">   * <span class="doctag">@Description</span>: 获得Annotation对象</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> jp</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> clazz</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@return</span> T</div><div class="line">   * <span class="doctag">@throws</span></div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> &lt;T extends Annotation&gt; <span class="function">T <span class="title">getAnnotation</span><span class="params">(ProceedingJoinPoint jp,</span></span></div><div class="line">      Class&lt;T&gt; clazz) &#123;</div><div class="line">    MethodSignature joinPointObject = (MethodSignature) jp.getSignature();</div><div class="line">    Method method = joinPointObject.getMethod();</div><div class="line">    <span class="keyword">return</span> method.getAnnotation(clazz);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * <span class="doctag">@Title</span>: getKeyNameFromParam</div><div class="line">   * <span class="doctag">@Description</span>: 获得组合后的KEY值</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> key</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> jp</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@return</span> String</div><div class="line">   * <span class="doctag">@throws</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getKeyNameFromParam</span><span class="params">(String key, ProceedingJoinPoint jp)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!key.contains(<span class="string">"$"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String regexp = <span class="string">"\\$\\&#123;[^\\&#125;]+\\&#125;"</span>;</div><div class="line">    Pattern pattern = Pattern.compile(regexp);</div><div class="line">    Matcher matcher = pattern.matcher(key);</div><div class="line">    List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">while</span> (matcher.find()) &#123;</div><div class="line">        names.add(matcher.group());</div><div class="line">      &#125;</div><div class="line">      key = executeNames(key, names, jp);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      log.error(<span class="string">"Regex Parse Error!"</span>, e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> key;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * <span class="doctag">@Title</span>: executeNames</div><div class="line">   * <span class="doctag">@Description</span>: 对KEY中的参数进行替换</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> key</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> names</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> jp</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@throws</span> OgnlException</div><div class="line">   * <span class="doctag">@return</span> String</div><div class="line">   * <span class="doctag">@throws</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">executeNames</span><span class="params">(String key, List&lt;String&gt; names,</span></span></div><div class="line">      ProceedingJoinPoint jp) <span class="keyword">throws</span> OgnlException &#123;</div><div class="line"></div><div class="line">    Method method = ((MethodSignature) jp.getSignature()).getMethod();</div><div class="line"></div><div class="line">    <span class="comment">// 形参列表</span></div><div class="line">    List&lt;String&gt; param = MethodParamNamesScaner.getParamNames(method);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (names == <span class="keyword">null</span> || names.size() == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Object[] params = jp.getArgs();</div><div class="line"></div><div class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.size(); i++) &#123;</div><div class="line">      map.put(param.get(i), params[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (String name : names) &#123;</div><div class="line">      String temp = name.substring(<span class="number">2</span>);</div><div class="line">      temp = temp.substring(<span class="number">0</span>, temp.length() - <span class="number">1</span>);</div><div class="line">      key = myReplace(key, name, (String) Ognl.getValue(temp, map));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> key;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * <span class="doctag">@Title</span>: myReplace</div><div class="line">   * <span class="doctag">@Description</span>: 不依赖Regex的替换，避免$符号、&#123;&#125;等在String.replaceAll方法中当做Regex处理时候的问题。</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> src</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> from</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> to</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@return</span> String</div><div class="line">   * <span class="doctag">@throws</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">myReplace</span><span class="params">(String src, String from, String to)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index = src.indexOf(from);</div><div class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> src;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> src.substring(<span class="number">0</span>, index) + to</div><div class="line">        + src.substring(index + from.length());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *</div><div class="line">   * <span class="doctag">@Title</span>: executeCondition</div><div class="line">   * <span class="doctag">@Description</span>: 判断是否需要进行缓存操作</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@param</span> condition parm</div><div class="line">   * <span class="doctag">@param</span> <span class="doctag">@return</span></div><div class="line">   * <span class="doctag">@return</span> boolean true:需要 false：不需要</div><div class="line">   * <span class="doctag">@throws</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">executeCondition</span><span class="params">(String condition, ProceedingJoinPoint jp)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="string">""</span>.equals(condition)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Method method = ((MethodSignature) jp.getSignature()).getMethod();</div><div class="line"></div><div class="line">    <span class="comment">// 形参列表</span></div><div class="line">    List&lt;String&gt; param = MethodParamNamesScaner.getParamNames(method);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (param == <span class="keyword">null</span> || param.size() == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Object[] params = jp.getArgs();</div><div class="line"></div><div class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.size(); i++) &#123;</div><div class="line">      map.put(param.get(i), params[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">boolean</span> returnVal = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      returnVal = (Boolean) Ognl.getValue(condition, map);</div><div class="line">    &#125; <span class="keyword">catch</span> (OgnlException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> returnVal;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCache</span><span class="params">(MemcachedClient cache)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cache = cache;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>辅助类：借用MethodParamNamesScaner类与Ognl结合完成对缓存key的动态解析功能，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用至：https://gist.github.com/wendal/2011728，用于解析方法的形参名称</span></div><div class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</div><div class="line"><span class="keyword">import</span> java.io.DataInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过读取Class文件,获得方法形参名称列表</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> wendal(wendal1985@gmail.com)</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParamNamesScaner</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 获取Method的形参名称列表</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> method</div><div class="line">   *            需要解析的方法</div><div class="line">   * <span class="doctag">@return</span> 形参名称列表,如果没有调试信息,将返回null</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getParamNames</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">int</span> size = method.getParameterTypes().length;</div><div class="line">      <span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">0</span>);</div><div class="line">      List&lt;String&gt; list = getParamNames(method.getDeclaringClass()).get(</div><div class="line">          getKey(method));</div><div class="line">      <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() != size)</div><div class="line">        <span class="keyword">return</span> list.subList(<span class="number">0</span>, size);</div><div class="line">      <span class="keyword">return</span> list;</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 获取Constructor的形参名称列表</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> constructor</div><div class="line">   *            需要解析的构造函数</div><div class="line">   * <span class="doctag">@return</span> 形参名称列表,如果没有调试信息,将返回null</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getParamNames</span><span class="params">(Constructor&lt;?&gt; constructor)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">int</span> size = constructor.getParameterTypes().length;</div><div class="line">      <span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">0</span>);</div><div class="line">      List&lt;String&gt; list = getParamNames(constructor.getDeclaringClass())</div><div class="line">          .get(getKey(constructor));</div><div class="line">      <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() != size)</div><div class="line">        <span class="keyword">return</span> list.subList(<span class="number">0</span>, size);</div><div class="line">      <span class="keyword">return</span> list;</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ---------------------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 获取一个类的所有方法/构造方法的形参名称Map</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> klass</div><div class="line">   *            需要解析的类</div><div class="line">   * <span class="doctag">@return</span> 所有方法/构造方法的形参名称Map</div><div class="line">   * <span class="doctag">@throws</span> IOException</div><div class="line">   *             如果有任何IO异常,不应该有,如果是本地文件,那100%遇到bug了</div><div class="line">   */</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; getParamNames(Class&lt;?&gt; klass)</div><div class="line">      <span class="keyword">throws</span> IOException &#123;</div><div class="line">    InputStream in = klass.getResourceAsStream(<span class="string">"/"</span></div><div class="line">        + klass.getName().replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + <span class="string">".class"</span>);</div><div class="line">    <span class="keyword">return</span> getParamNames(in);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; getParamNames(InputStream in)</div><div class="line">      <span class="keyword">throws</span> IOException &#123;</div><div class="line">    DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(in));</div><div class="line">    Map&lt;String, List&lt;String&gt;&gt; names = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line">    Map&lt;Integer, String&gt; strs = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</div><div class="line">    dis.skipBytes(<span class="number">4</span>);<span class="comment">// Magic</span></div><div class="line">    dis.skipBytes(<span class="number">2</span>);<span class="comment">// 副版本号</span></div><div class="line">    dis.skipBytes(<span class="number">2</span>);<span class="comment">// 主版本号</span></div><div class="line"></div><div class="line">    <span class="comment">// 读取常量池</span></div><div class="line">    <span class="keyword">int</span> constant_pool_count = dis.readUnsignedShort();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (constant_pool_count - <span class="number">1</span>); i++) &#123;</div><div class="line">      <span class="keyword">byte</span> flag = dis.readByte();</div><div class="line">      <span class="keyword">switch</span> (flag) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">7</span>:<span class="comment">// CONSTANT_Class:</span></div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">9</span>:<span class="comment">// CONSTANT_Fieldref:</span></div><div class="line">      <span class="keyword">case</span> <span class="number">10</span>:<span class="comment">// CONSTANT_Methodref:</span></div><div class="line">      <span class="keyword">case</span> <span class="number">11</span>:<span class="comment">// CONSTANT_InterfaceMethodref:</span></div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">8</span>:<span class="comment">// CONSTANT_String:</span></div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">// CONSTANT_Integer:</span></div><div class="line">      <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">// CONSTANT_Float:</span></div><div class="line">        dis.skipBytes(<span class="number">4</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">5</span>:<span class="comment">// CONSTANT_Long:</span></div><div class="line">      <span class="keyword">case</span> <span class="number">6</span>:<span class="comment">// CONSTANT_Double:</span></div><div class="line">        dis.skipBytes(<span class="number">8</span>);</div><div class="line">        i++;<span class="comment">// 必须跳过一个,这是class文件设计的一个缺陷,历史遗留问题</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">12</span>:<span class="comment">// CONSTANT_NameAndType:</span></div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">// CONSTANT_Utf8:</span></div><div class="line">        <span class="keyword">int</span> len = dis.readUnsignedShort();</div><div class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</div><div class="line">        dis.read(data);</div><div class="line">        strs.put(i + <span class="number">1</span>, <span class="keyword">new</span> String(data, <span class="string">"UTF-8"</span>));<span class="comment">// 必然是UTF8的</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">15</span>:<span class="comment">// CONSTANT_MethodHandle:</span></div><div class="line">        dis.skipBytes(<span class="number">1</span>);</div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">16</span>:<span class="comment">// CONSTANT_MethodType:</span></div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">18</span>:<span class="comment">// CONSTANT_InvokeDynamic:</span></div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        dis.skipBytes(<span class="number">2</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Impossible!! flag="</span> + flag);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dis.skipBytes(<span class="number">2</span>);<span class="comment">// 版本控制符</span></div><div class="line">    dis.skipBytes(<span class="number">2</span>);<span class="comment">// 类名</span></div><div class="line">    dis.skipBytes(<span class="number">2</span>);<span class="comment">// 超类</span></div><div class="line"></div><div class="line">    <span class="comment">// 跳过接口定义</span></div><div class="line">    <span class="keyword">int</span> interfaces_count = dis.readUnsignedShort();</div><div class="line">    dis.skipBytes(<span class="number">2</span> * interfaces_count);<span class="comment">// 每个接口数据,是2个字节</span></div><div class="line"></div><div class="line">    <span class="comment">// 跳过字段定义</span></div><div class="line">    <span class="keyword">int</span> fields_count = dis.readUnsignedShort();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields_count; i++) &#123;</div><div class="line">      dis.skipBytes(<span class="number">2</span>);</div><div class="line">      dis.skipBytes(<span class="number">2</span>);</div><div class="line">      dis.skipBytes(<span class="number">2</span>);</div><div class="line">      <span class="keyword">int</span> attributes_count = dis.readUnsignedShort();</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; attributes_count; j++) &#123;</div><div class="line">        dis.skipBytes(<span class="number">2</span>);<span class="comment">// 跳过访问控制符</span></div><div class="line">        <span class="keyword">int</span> attribute_length = dis.readInt();</div><div class="line">        dis.skipBytes(attribute_length);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 开始读取方法</span></div><div class="line">    <span class="keyword">int</span> methods_count = dis.readUnsignedShort();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods_count; i++) &#123;</div><div class="line">      dis.skipBytes(<span class="number">2</span>); <span class="comment">// 跳过访问控制符</span></div><div class="line">      String methodName = strs.get(dis.readUnsignedShort());</div><div class="line">      String descriptor = strs.get(dis.readUnsignedShort());</div><div class="line">      <span class="keyword">short</span> attributes_count = dis.readShort();</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; attributes_count; j++) &#123;</div><div class="line">        String attrName = strs.get(dis.readUnsignedShort());</div><div class="line">        <span class="keyword">int</span> attribute_length = dis.readInt();</div><div class="line">        <span class="keyword">if</span> (<span class="string">"Code"</span>.equals(attrName)) &#123; <span class="comment">// 形参只在Code属性中</span></div><div class="line">          dis.skipBytes(<span class="number">2</span>);</div><div class="line">          dis.skipBytes(<span class="number">2</span>);</div><div class="line">          <span class="keyword">int</span> code_len = dis.readInt();</div><div class="line">          dis.skipBytes(code_len); <span class="comment">// 跳过具体代码</span></div><div class="line">          <span class="keyword">int</span> exception_table_length = dis.readUnsignedShort();</div><div class="line">          dis.skipBytes(<span class="number">8</span> * exception_table_length); <span class="comment">// 跳过异常表</span></div><div class="line"></div><div class="line">          <span class="keyword">int</span> code_attributes_count = dis.readUnsignedShort();</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; code_attributes_count; k++) &#123;</div><div class="line">            <span class="keyword">int</span> str_index = dis.readUnsignedShort();</div><div class="line">            String codeAttrName = strs.get(str_index);</div><div class="line">            <span class="keyword">int</span> code_attribute_length = dis.readInt();</div><div class="line">            <span class="keyword">if</span> (<span class="string">"LocalVariableTable"</span>.equals(codeAttrName)) &#123;<span class="comment">// 形参在LocalVariableTable属性中</span></div><div class="line">              <span class="keyword">int</span> local_variable_table_length = dis</div><div class="line">                  .readUnsignedShort();</div><div class="line">              List&lt;String&gt; varNames = <span class="keyword">new</span> ArrayList&lt;String&gt;(</div><div class="line">                  local_variable_table_length);</div><div class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; local_variable_table_length; l++) &#123;</div><div class="line">                dis.skipBytes(<span class="number">2</span>);</div><div class="line">                dis.skipBytes(<span class="number">2</span>);</div><div class="line">                String varName = strs.get(dis</div><div class="line">                    .readUnsignedShort());</div><div class="line">                dis.skipBytes(<span class="number">2</span>);</div><div class="line">                dis.skipBytes(<span class="number">2</span>);</div><div class="line">                <span class="keyword">if</span> (!<span class="string">"this"</span>.equals(varName)) <span class="comment">// 非静态方法,第一个参数是this</span></div><div class="line">                  varNames.add(varName);</div><div class="line">              &#125;</div><div class="line">              names.put(methodName + <span class="string">","</span> + descriptor, varNames);</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">              dis.skipBytes(code_attribute_length);</div><div class="line">          &#125;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">          dis.skipBytes(attribute_length);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    dis.close();</div><div class="line">    <span class="keyword">return</span> names;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 传入Method或Constructor,获取getParamNames方法返回的Map所对应的key</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Method) &#123;</div><div class="line">      sb.append(((Method) obj).getName()).append(<span class="string">','</span>);</div><div class="line">      getDescriptor(sb, (Method) obj);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Constructor) &#123;</div><div class="line">      sb.append(<span class="string">"&lt;init&gt;,"</span>); <span class="comment">// 只有非静态构造方法才能用有方法参数的,而且通过反射API拿不到静态构造方法</span></div><div class="line">      getDescriptor(sb, (Constructor&lt;?&gt;) obj);</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not Method or Constructor!"</span>);</div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDescriptor</span><span class="params">(StringBuilder sb, Method method)</span> </span>&#123;</div><div class="line">    sb.append(<span class="string">'('</span>);</div><div class="line">    <span class="keyword">for</span> (Class&lt;?&gt; klass : method.getParameterTypes())</div><div class="line">      getDescriptor(sb, klass);</div><div class="line">    sb.append(<span class="string">')'</span>);</div><div class="line">    getDescriptor(sb, method.getReturnType());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDescriptor</span><span class="params">(StringBuilder sb,</span></span></div><div class="line">      Constructor&lt;?&gt; constructor) &#123;</div><div class="line">    sb.append(<span class="string">'('</span>);</div><div class="line">    <span class="keyword">for</span> (Class&lt;?&gt; klass : constructor.getParameterTypes())</div><div class="line">      getDescriptor(sb, klass);</div><div class="line">    sb.append(<span class="string">')'</span>);</div><div class="line">    sb.append(<span class="string">'V'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/** 本方法来源于ow2的asm库的Type类 */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDescriptor</span><span class="params">(<span class="keyword">final</span> StringBuilder buf, <span class="keyword">final</span> Class&lt;?&gt; c)</span> </span>&#123;</div><div class="line">    Class&lt;?&gt; d = c;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (d.isPrimitive()) &#123;</div><div class="line">        <span class="keyword">char</span> car;</div><div class="line">        <span class="keyword">if</span> (d == Integer.TYPE) &#123;</div><div class="line">          car = <span class="string">'I'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == Void.TYPE) &#123;</div><div class="line">          car = <span class="string">'V'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == Boolean.TYPE) &#123;</div><div class="line">          car = <span class="string">'Z'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == Byte.TYPE) &#123;</div><div class="line">          car = <span class="string">'B'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == Character.TYPE) &#123;</div><div class="line">          car = <span class="string">'C'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == Short.TYPE) &#123;</div><div class="line">          car = <span class="string">'S'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == Double.TYPE) &#123;</div><div class="line">          car = <span class="string">'D'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == Float.TYPE) &#123;</div><div class="line">          car = <span class="string">'F'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="comment">/* if (d == Long.TYPE) */</span>&#123;</div><div class="line">          car = <span class="string">'J'</span>;</div><div class="line">        &#125;</div><div class="line">        buf.append(car);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d.isArray()) &#123;</div><div class="line">        buf.append(<span class="string">'['</span>);</div><div class="line">        d = d.getComponentType();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        buf.append(<span class="string">'L'</span>);</div><div class="line">        String name = d.getName();</div><div class="line">        <span class="keyword">int</span> len = name.length();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">          <span class="keyword">char</span> car = name.charAt(i);</div><div class="line">          buf.append(car == <span class="string">'.'</span> ? <span class="string">'/'</span> : car);</div><div class="line">        &#125;</div><div class="line">        buf.append(<span class="string">';'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用案例："><a href="#使用案例：" class="headerlink" title="使用案例："></a>使用案例：</h2><h3 id="1-使用缓存："><a href="#1-使用缓存：" class="headerlink" title="1.使用缓存："></a>1.使用缓存：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * value:缓存中的键，$&#123;map.name&#125;会动态替换为传入参数map里面的key为name的值。</div><div class="line"> * comdition：缓存执行条件：!map.containsKey('execute')表示map中不包含execute这个key的时候才进行缓存操作。</div><div class="line"> * 这里面的map是传入的参数名称。</div><div class="line"> * 执行到该方法会自动去缓存里面查找该key，有就直接返回，没有就执行该方法，如果返回值不为空则同时存入缓存并返回结果。</div><div class="line"> */</div><div class="line"><span class="meta">@LoadFromMemcached</span>(value=<span class="string">"Resource_selectByMap_$&#123;map.name&#125;"</span>,condition=<span class="string">"!map.containsKey('execute')"</span> )</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Resource&gt; <span class="title">selectByMap</span><span class="params">(Object map)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.selectByMap(map);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表示执行该method(selectByMap)的时候会首先去缓存组件中查找数据，如果查找到数据就直接返回，如果找不到数据就执行方法体，并将返回值记录入缓存中。</p>
<h3 id="2-更新缓存："><a href="#2-更新缓存：" class="headerlink" title="2.更新缓存："></a>2.更新缓存：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 同样value为缓存中的key，$&#123;t.name&#125;会动态替换为update方法传入参数Resource的name字段</div><div class="line"> * comdition：字段作用同上，不演示了</div><div class="line"> */</div><div class="line"><span class="meta">@UpdateForMemcached</span>(value=<span class="string">"Resource_selectByMap_$&#123;t.name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Resource t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.update(t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表示执行该method(update)的时候会同步将缓存中的key置为过期(并不是把该方法的返回值放入缓存，只是将对应的缓存设为过期，下次再执行selectByMap的时候获取的就是最新的数据了)。</p>
<h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><p>本文只是简单的解决方案，可能有很多不足的地方，欢迎交流，以此简单的结构为基础进行扩展，将MemcachedClient以及相关的缓存操作方法提取出来并完善细节即可完成基本通用的缓存组件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;  由于项目的原因，需要对项目中大量访问多修改少的数据进行缓存并管理，为达到开发过程中通过Annotation简单的配置既可以完成对缓存的设置与更新的需求，故而设计的该简易的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="琢琢磨磨" scheme="http://builderqiu.com/categories/%E7%90%A2%E7%90%A2%E7%A3%A8%E7%A3%A8/"/>
    
    
      <category term="Spring" scheme="http://builderqiu.com/tags/Spring/"/>
    
      <category term="Annotation" scheme="http://builderqiu.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>在Servlet(或者Filter，或者Listener)中使用spring的IOC容器</title>
    <link href="http://builderqiu.com/2014/05/UseSpringInServlet.html"/>
    <id>http://builderqiu.com/2014/05/UseSpringInServlet.html</id>
    <published>2014-05-20T16:00:00.000Z</published>
    <updated>2016-12-25T08:23:35.072Z</updated>
    
    <content type="html"><![CDATA[<p>web.xml中的加载顺序为：listener &gt; filter &gt; servlet &gt; spring。<br>其中filter的执行顺序是filter-mapping在web.xml中出现的先后顺序。<br>加载顺序会影响对Spring bean的调用。比如filter需要用到bean ，但是加载顺序是先加载filter后加载Spring，则filter中初始化操作中的bean为null。所以，如果过滤器中要使用到 bean，可以将spring 的加载改成Listener的方式。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>   </div><div class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。<br>如果在web.xml中不写任何参数配置信息，默认的路径是”/WEB-INF/applicationContext.xml”，在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml。如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext ctx = <span class="keyword">null</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ctx == <span class="keyword">null</span>) &#123;</div><div class="line">        ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(<span class="keyword">this</span>.servletContext);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ctx.getBean(name);</div><div class="line">&#125;</div><div class="line">``` 	</div><div class="line"></div><div class="line"> 在Servlet或者filter或者Listener中使用Spring的IOC容器的方法是：</div><div class="line"></div><div class="line">```java</div><div class="line">WebApplicationContext webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(request.getSession().getServletContext());</div></pre></td></tr></table></figure>
<p>  由于spring是注入的对象放在ServletContext中的，所以可以直接在ServletContext取出WebApplicationContext 对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WebApplicationContext webApplicationContext = (WebApplicationContext) servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</div></pre></td></tr></table></figure>
<p>  事实上WebApplicationContextUtils.getWebApplicationContext方法就是使用上面的代码实现的，建议使用上面上面的静态方法</p>
<p>  注意：在使用webApplicationContext.getBean(“ServiceName”)的时候，前面强制转化要使用接口，如果使用实现类会报类型转换错误。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserService userService ＝ (UserService) webApplicationContext.getBean(<span class="string">"userService"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web.xml中的加载顺序为：listener &amp;gt; filter &amp;gt; servlet &amp;gt; spring。&lt;br&gt;其中filter的执行顺序是filter-mapping在web.xml中出现的先后顺序。&lt;br&gt;加载顺序会影响对Spring bean的调用。比如filter需要用到bean ，但是加载顺序是先加载filter后加载Spring，则filter中初始化操作中的bean为null。所以，如果过滤器中要使用到 bean，可以将spring 的加载改成Listener的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="他山之石" scheme="http://builderqiu.com/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="Spring" scheme="http://builderqiu.com/tags/Spring/"/>
    
  </entry>
  
</feed>
